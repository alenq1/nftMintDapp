{
  "address": "0x708525aC34dd7D5887Ba630362C37C1Bd0641Acf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "maxSupply_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxMintPerWalletWhite_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxMintPerWalletPublic_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintPriceWhite_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintPricePublic_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "whitelistAddress",
          "type": "address"
        }
      ],
      "name": "AddedToWhiteList",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PublicMintEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "removedAddress",
          "type": "address"
        }
      ],
      "name": "RemovedFromWhiteList",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isPaused",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "SetPause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum NftMintStage.MintStage",
          "name": "",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "StageChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WhiteMintEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "msgSender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "addAddressToWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseExtension",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastActivity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMintPerWalletPublic",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMintPerWalletWhite",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintPricePublic",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintPriceWhite",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextStage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "publicMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeAddressFromWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri_",
          "type": "string"
        }
      ],
      "name": "revealCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri_",
          "type": "string"
        }
      ],
      "name": "setBaseUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxMintPerWalletWhite_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxMintPerWalletPublic_",
          "type": "uint256"
        }
      ],
      "name": "setMaxMintPerWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxSupply_",
          "type": "uint256"
        }
      ],
      "name": "setMaxSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mintPriceWhite_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintPricePublic_",
          "type": "uint256"
        }
      ],
      "name": "setMintPrices",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stage",
      "outputs": [
        {
          "internalType": "enum NftMintStage.MintStage",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whiteListedAddress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isWhiteListed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "allowedMints",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "whiteMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc90ab27a86eacf53397a3f03c47d621772eceb8f451fde24d314126f64354770",
  "receipt": {
    "to": null,
    "from": "0x06474AD123a46274b82d0d7Fbe010fBA23c6ed70",
    "contractAddress": "0x708525aC34dd7D5887Ba630362C37C1Bd0641Acf",
    "transactionIndex": 21,
    "gasUsed": "3587451",
    "logsBloom": "0x
    "blockHash": "0x6fd0aab095ba5c5979fb8bc7dfec4c5580a7354ae44113ff73320f8c82a4bbce",
    "transactionHash": "0xc90ab27a86eacf53397a3f03c47d621772eceb8f451fde24d314126f64354770",
    "logs": [
      {
        "transactionIndex": 21,
        "blockNumber": 10805671,
        "transactionHash": "0xc90ab27a86eacf53397a3f03c47d621772eceb8f451fde24d314126f64354770",
        "address": "0x708525aC34dd7D5887Ba630362C37C1Bd0641Acf",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000006474ad123a46274b82d0d7fbe010fba23c6ed70"
        ],
        "data": "0x",
        "logIndex": 21,
        "blockHash": "0x6fd0aab095ba5c5979fb8bc7dfec4c5580a7354ae44113ff73320f8c82a4bbce"
      }
    ],
    "blockNumber": 10805671,
    "cumulativeGasUsed": "7525176",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Pixel Invaderz",
    "PIXINV",
    20,
    2,
    4,
    "20000000000000000",
    "40000000000000000"
  ],
  "numDeployments": 5,
  "solcInputHash": "422b89edec819ab8243a62542adf4838",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMintPerWalletWhite_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMintPerWalletPublic_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintPriceWhite_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintPricePublic_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whitelistAddress\",\"type\":\"address\"}],\"name\":\"AddedToWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PublicMintEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removedAddress\",\"type\":\"address\"}],\"name\":\"RemovedFromWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SetPause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum NftMintStage.MintStage\",\"name\":\"\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"StageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WhiteMintEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addAddressToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseExtension\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastActivity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintPerWalletPublic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintPerWalletWhite\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPricePublic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPriceWhite\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"publicMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"revealCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxMintPerWalletWhite_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMintPerWalletPublic_\",\"type\":\"uint256\"}],\"name\":\"setMaxMintPerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSupply_\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintPriceWhite_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintPricePublic_\",\"type\":\"uint256\"}],\"name\":\"setMintPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"internalType\":\"enum NftMintStage.MintStage\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteListedAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isWhiteListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"allowedMints\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"whiteMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NftMintStage.sol\":\"NftMintStage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/NftMintStage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\"; \\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract NftMintStage is ERC721, ERC721Enumerable, Ownable, ReentrancyGuard {\\n    \\n\\n    enum MintStage {        \\n        INITIATED,       \\n        WHITEMINT,\\n        PUBLICMINT,\\n        REVEAL,        \\n        FINISHED\\n    }\\n\\n    struct WhitelistData {\\n        bool isWhiteListed;\\n        uint256 allowedMints;\\n\\n    }\\n\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenIdCounter;\\n    \\n    bool public isPaused;   \\n    bool public burnEnabled;    \\n    // uint public whitelistCount;\\n    mapping(address => WhitelistData) public whiteListedAddress;    \\n    uint256 public maxSupply;\\n    uint256 public maxMintPerWalletWhite;\\n    uint256 public maxMintPerWalletPublic;    \\n    uint256 public mintPricePublic;\\n    uint256 public mintPriceWhite; \\n    string public uri;       \\n    string public baseExtension = \\\".json\\\";\\n    MintStage public stage;\\n    uint256 public lastActivity;\\n    \\n    \\n    constructor(\\n        string memory name_, \\n        string memory symbol_,\\n        uint256 maxSupply_,\\n        uint256 maxMintPerWalletWhite_,                \\n        uint256 maxMintPerWalletPublic_,        \\n        uint256 mintPriceWhite_,\\n        uint256 mintPricePublic_\\n    ) \\n        ERC721(name_, symbol_){                \\n        burnEnabled = false;      \\n        maxSupply = maxSupply_;\\n        maxMintPerWalletPublic = maxMintPerWalletPublic_;\\n        maxMintPerWalletWhite = maxMintPerWalletWhite_;\\n        mintPricePublic = mintPricePublic_;\\n        mintPriceWhite = mintPriceWhite_;\\n        lastActivity = block.timestamp;\\n        stage = MintStage.INITIATED;\\n        \\n    }\\n\\n    modifier atStage(MintStage _stage) {\\n        require(!isPaused, \\\"The contract is paused\\\");\\n        require(stage == _stage, \\\"This action is not allowed in this status\\\");\\n        _;\\n    }\\n\\n    modifier validateMint(uint256 amount){           \\n        require(amount > 0, \\\"minimum mint amount is 1\\\");    \\n        require(totalSupply() < maxSupply, \\\"Sold Out\\\");  \\n        require(msg.sender == tx.origin, \\\"only mint origin wallet\\\"); \\n        _;\\n    }\\n    \\n    function setMaxSupply(uint256 maxSupply_) \\n        onlyOwner\\n        atStage(MintStage.INITIATED)        \\n        public {\\n            maxSupply = maxSupply_;\\n    } \\n\\n    function setMaxMintPerWallet(uint256 maxMintPerWalletWhite_, uint256 maxMintPerWalletPublic_) \\n        onlyOwner\\n        atStage(MintStage.INITIATED)        \\n        public {            \\n            maxMintPerWalletWhite = maxMintPerWalletWhite_;\\n            maxMintPerWalletPublic = maxMintPerWalletPublic_;\\n    }\\n\\n    function setMintPrices(uint256 mintPriceWhite_, uint256 mintPricePublic_) \\n        onlyOwner\\n        atStage(MintStage.INITIATED)        \\n        public {\\n            mintPriceWhite = mintPriceWhite_;\\n            mintPricePublic = mintPricePublic_;            \\n    }\\n\\n    function setBaseUri(string memory uri_) \\n        onlyOwner\\n        atStage(MintStage.INITIATED)        \\n        public {\\n            uri = uri_;\\n    } \\n\\n    function addAddressToWhitelist(address[] calldata _addresses) \\n        onlyOwner\\n        atStage(MintStage.INITIATED)        \\n        external   \\n    {\\n        require(_addresses.length > 0, \\\"No addresses\\\");\\n        for (uint256 i = 0; i < _addresses.length; i++) {\\n            whiteListedAddress[_addresses[i]].allowedMints = maxMintPerWalletWhite;\\n            whiteListedAddress[_addresses[i]].isWhiteListed = true;\\n            // whitelistCount++;\\n            emit AddedToWhiteList(_addresses[i]);\\n        }\\n    }\\n\\n    function removeAddressFromWhitelist(address _address) \\n        onlyOwner\\n        atStage(MintStage.INITIATED)        \\n        external {\\n        \\n            require(whiteListedAddress[_address].isWhiteListed, \\\"Address is not whitelisted\\\");        \\n            delete whiteListedAddress[_address]; \\n            // whitelistCount--;       \\n            emit RemovedFromWhiteList(_address);\\n    }\\n\\n\\n    function whiteMint(uint256 amount) \\n        atStage(MintStage.WHITEMINT)\\n        validateMint(amount)\\n        external \\n        payable { \\n            // require(block.timestamp - lastActivity > 1 minutes, \\\"WhiteListMint not active yet\\\");\\n            require(whiteListedAddress[msg.sender].isWhiteListed, \\\"address not whitelisted\\\");\\n            require(amount <= maxMintPerWalletWhite, \\\"exceed max mint per wallet\\\");            \\n            require(whiteListedAddress[msg.sender].allowedMints >= amount, \\\"not allowed mint more than amount left\\\");\\n            \\n            require(mintPriceWhite * amount <= msg.value, \\\"insuficient fonds\\\");                        \\n            require((whiteListedAddress[msg.sender].allowedMints - amount) >= 0, \\\"no negative\\\");\\n            \\n            whiteListedAddress[msg.sender].allowedMints -= amount;\\n            for (uint256 i = 0; i < amount; i++) {\\n                _tokenIdCounter.increment();\\n                _mint(msg.sender, _tokenIdCounter.current());        \\n            }\\n            emit WhiteMintEvent(msg.sender, amount);\\n\\n    }\\n\\n    function publicMint(uint256 amount) \\n        atStage(MintStage.PUBLICMINT)\\n        validateMint(amount)        \\n        external \\n        payable{\\n            // require(block.timestamp - lastActivity > 1 minutes, \\\"PublicMint not active yet\\\");\\n            require(amount <= maxMintPerWalletPublic, \\\"exceed max mint per wallet\\\");  \\n            require((amount + totalSupply()) <= maxSupply, \\\"amount exceed remaining mint\\\");              \\n            require(mintPricePublic * amount <= msg.value, \\\"insuficient fonds\\\"); \\n                                    \\n            for (uint256 i = 0; i < amount; i++) {\\n                _tokenIdCounter.increment();\\n                _safeMint(msg.sender, _tokenIdCounter.current());        \\n            }    \\n            \\n            emit PublicMintEvent(msg.sender, amount);  \\n    }\\n\\n\\n    function revealCollection(string memory uri_) \\n        onlyOwner\\n        atStage(MintStage.REVEAL)        \\n        public {\\n            uri = uri_;                   \\n    }  \\n\\n\\n    function withdraw() \\n        onlyOwner\\n        atStage(MintStage.FINISHED)\\n        nonReentrant\\n        public \\n        payable \\n        {\\n            require(address(this).balance > 0, \\\"Balance is 0\\\");\\n            payable(owner()).transfer(address(this).balance);\\n    }\\n\\n    function enableBurn()     \\n    onlyOwner \\n    atStage(MintStage.FINISHED) \\n    public {\\n        burnEnabled = true;\\n    }\\n\\n    function setPause() \\n        onlyOwner\\n        public {\\n            isPaused = !isPaused;\\n            lastActivity = block.timestamp;\\n            emit SetPause(isPaused, block.timestamp);\\n    } \\n\\n    \\n    function nextStage() public onlyOwner {\\n        require(!isPaused, \\\"The contract is paused\\\");\\n        stage = MintStage(uint(stage) + 1);\\n        lastActivity = block.timestamp;\\n        emit StageChanged(stage, block.timestamp);\\n    }\\n\\n    \\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721 Metadata: URI query for nonexistent token\\\"\\n        ); \\n\\n        if(stage > MintStage.PUBLICMINT){\\n            return string(abi.encodePacked(uri,  Strings.toString(tokenId),baseExtension));\\n        }\\n        else{\\n            return string(abi.encodePacked(uri));\\n        }\\n        \\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId)\\n        internal\\n        override(ERC721, ERC721Enumerable)\\n    {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721, ERC721Enumerable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    \\n    event StageChanged(MintStage indexed, uint256 time );\\n    event SetPause(bool isPaused, uint256 time );\\n    event AddedToWhiteList(address indexed whitelistAddress);\\n    event RemovedFromWhiteList(address indexed removedAddress);\\n    event WhiteMintEvent(address indexed sender, uint indexed amount);\\n    event PublicMintEvent(address indexed sender, uint indexed amount);\\n    event Withdraw(address indexed msgSender, address indexed token);\\n}\\n\",\"keccak256\":\"0xbc7725be7aec1fa65a8f25f91b6b3cd1785f3de56fb3a2d2c196db8a125bd5a2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040526005608081905264173539b7b760d91b60a09081526200002891601591906200013c565b503480156200003657600080fd5b5060405162003eca38038062003eca8339810160408190526200005991620002af565b865187908790620000729060009060208501906200013c565b508051620000889060019060208401906200013c565b505050620000a56200009f620000e660201b60201c565b620000ea565b6001600b55600d805461ff0019169055600f949094556011919091556010919091556012919091556013555050426017556016805460ff1916905562000385565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200014a9062000348565b90600052602060002090601f0160209004810192826200016e5760008555620001b9565b82601f106200018957805160ff1916838001178555620001b9565b82800160010185558215620001b9579182015b82811115620001b95782518255916020019190600101906200019c565b50620001c7929150620001cb565b5090565b5b80821115620001c75760008155600101620001cc565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200020a57600080fd5b81516001600160401b0380821115620002275762000227620001e2565b604051601f8301601f19908116603f01168101908282118183101715620002525762000252620001e2565b816040528381526020925086838588010111156200026f57600080fd5b600091505b8382101562000293578582018301518183018401529082019062000274565b83821115620002a55760008385830101525b9695505050505050565b600080600080600080600060e0888a031215620002cb57600080fd5b87516001600160401b0380821115620002e357600080fd5b620002f18b838c01620001f8565b985060208a01519150808211156200030857600080fd5b50620003178a828b01620001f8565b60408a015160608b015160808c015160a08d015160c0909d01519b9e939d50919b909a919950975095509350505050565b600181811c908216806200035d57607f821691505b602082108114156200037f57634e487b7160e01b600052602260045260246000fd5b50919050565b613b3580620003956000396000f3fe6080604052600436106102e75760003560e01c8063715018a611610184578063c6682862116100d6578063e1fcd7071161008a578063ecdab32611610064578063ecdab326146107e4578063ee3743ab14610804578063f2fde38b1461081957600080fd5b8063e1fcd70714610770578063e985e9c514610786578063eac989f8146107cf57600080fd5b8063d3bcbb3c116100bb578063d3bcbb3c14610725578063d431b1ac14610745578063d5abeb011461075a57600080fd5b8063c6682862146106f0578063c87b56dd1461070557600080fd5b8063a0bcfc7f11610138578063b88d4fde11610112578063b88d4fde14610658578063c040e6b814610678578063c166d13d1461069f57600080fd5b8063a0bcfc7f146105fe578063a22cb4651461061e578063b187bd261461063e57600080fd5b80638da5cb5b116101695780638da5cb5b146105b55780638f708bcf146105d357806395d89b41146105e957600080fd5b8063715018a6146105805780637bd4f0711461059557600080fd5b80633b37d1d61161023d57806350179bae116101f15780636352211e116101cb5780636352211e146105205780636f8b44b01461054057806370a082311461056057600080fd5b806350179bae146104cb5780635dc96d16146104eb5780635fd51b371461050a57600080fd5b806342842e0e1161022257806342842e0e1461047857806347d6b593146104985780634f6ccce7146104ab57600080fd5b80633b37d1d61461045b5780633ccfd60b1461047057600080fd5b80631c18a0621161029f5780632db11544116102795780632db11544146104125780632e7b26a7146104255780632f745c591461043b57600080fd5b80631c18a062146103bc57806323b872dd146103d2578063286dd3f5146103f257600080fd5b8063081812fc116102d0578063081812fc14610343578063095ea7b31461037b57806318160ddd1461039d57600080fd5b806301ffc9a7146102ec57806306fdde0314610321575b600080fd5b3480156102f857600080fd5b5061030c6103073660046134b4565b610839565b60405190151581526020015b60405180910390f35b34801561032d57600080fd5b5061033661084a565b6040516103189190613530565b34801561034f57600080fd5b5061036361035e366004613543565b6108dc565b6040516001600160a01b039091168152602001610318565b34801561038757600080fd5b5061039b610396366004613573565b610976565b005b3480156103a957600080fd5b506008545b604051908152602001610318565b3480156103c857600080fd5b506103ae60125481565b3480156103de57600080fd5b5061039b6103ed36600461359d565b610aa8565b3480156103fe57600080fd5b5061039b61040d3660046135d9565b610b2f565b61039b610420366004613543565b610d06565b34801561043157600080fd5b506103ae60105481565b34801561044757600080fd5b506103ae610456366004613573565b611038565b34801561046757600080fd5b5061039b6110e0565b61039b611211565b34801561048457600080fd5b5061039b61049336600461359d565b611417565b61039b6104a6366004613543565b611432565b3480156104b757600080fd5b506103ae6104c6366004613543565b611881565b3480156104d757600080fd5b5061039b6104e6366004613680565b611925565b3480156104f757600080fd5b50600d5461030c90610100900460ff1681565b34801561051657600080fd5b506103ae60175481565b34801561052c57600080fd5b5061036361053b366004613543565b611a57565b34801561054c57600080fd5b5061039b61055b366004613543565b611ae2565b34801561056c57600080fd5b506103ae61057b3660046135d9565b611c07565b34801561058c57600080fd5b5061039b611ca1565b3480156105a157600080fd5b5061039b6105b03660046136c9565b611cf5565b3480156105c157600080fd5b50600a546001600160a01b0316610363565b3480156105df57600080fd5b506103ae60135481565b3480156105f557600080fd5b50610336611e20565b34801561060a57600080fd5b5061039b610619366004613680565b611e2f565b34801561062a57600080fd5b5061039b6106393660046136eb565b611ec6565b34801561064a57600080fd5b50600d5461030c9060ff1681565b34801561066457600080fd5b5061039b610673366004613727565b611ed5565b34801561068457600080fd5b506016546106929060ff1681565b60405161031891906137b9565b3480156106ab57600080fd5b506106d96106ba3660046135d9565b600e602052600090815260409020805460019091015460ff9091169082565b604080519215158352602083019190915201610318565b3480156106fc57600080fd5b50610336611f63565b34801561071157600080fd5b50610336610720366004613543565b611ff1565b34801561073157600080fd5b5061039b6107403660046137e1565b6120e9565b34801561075157600080fd5b5061039b612378565b34801561076657600080fd5b506103ae600f5481565b34801561077c57600080fd5b506103ae60115481565b34801561079257600080fd5b5061030c6107a1366004613856565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b3480156107db57600080fd5b50610336612419565b3480156107f057600080fd5b5061039b6107ff3660046136c9565b612426565b34801561081057600080fd5b5061039b612551565b34801561082557600080fd5b5061039b6108343660046135d9565b612689565b600061084482612759565b92915050565b60606000805461085990613889565b80601f016020809104026020016040519081016040528092919081815260200182805461088590613889565b80156108d25780601f106108a7576101008083540402835291602001916108d2565b820191906000526020600020905b8154815290600101906020018083116108b557829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b031661095a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061098182611a57565b9050806001600160a01b0316836001600160a01b03161415610a0b5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610951565b336001600160a01b0382161480610a275750610a2781336107a1565b610a995760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610951565b610aa38383612797565b505050565b610ab23382612812565b610b245760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610951565b610aa3838383612909565b600a546001600160a01b03163314610b775760405162461bcd60e51b81526020600482018190526024820152600080516020613ae08339815191526044820152606401610951565b600d5460009060ff1615610bc65760405162461bcd60e51b8152602060048201526016602482015275151a194818dbdb9d1c9858dd081a5cc81c185d5cd95960521b6044820152606401610951565b806004811115610bd857610bd86137a3565b60165460ff166004811115610bef57610bef6137a3565b14610c4e5760405162461bcd60e51b815260206004820152602960248201527f5468697320616374696f6e206973206e6f7420616c6c6f77656420696e20746860448201526869732073746174757360b81b6064820152608401610951565b6001600160a01b0382166000908152600e602052604090205460ff16610cb65760405162461bcd60e51b815260206004820152601a60248201527f41646472657373206973206e6f742077686974656c69737465640000000000006044820152606401610951565b6001600160a01b0382166000818152600e6020526040808220805460ff19168155600101829055517f9354cd337eebad48c93d70f7321b188732c3061fa5c48fe32b8e6f9480c52fcc9190a25050565b600d5460029060ff1615610d555760405162461bcd60e51b8152602060048201526016602482015275151a194818dbdb9d1c9858dd081a5cc81c185d5cd95960521b6044820152606401610951565b806004811115610d6757610d676137a3565b60165460ff166004811115610d7e57610d7e6137a3565b14610ddd5760405162461bcd60e51b815260206004820152602960248201527f5468697320616374696f6e206973206e6f7420616c6c6f77656420696e20746860448201526869732073746174757360b81b6064820152608401610951565b8160008111610e2e5760405162461bcd60e51b815260206004820152601860248201527f6d696e696d756d206d696e7420616d6f756e74206973203100000000000000006044820152606401610951565b600f5460085410610e6c5760405162461bcd60e51b815260206004820152600860248201526714dbdb190813dd5d60c21b6044820152606401610951565b333214610ebb5760405162461bcd60e51b815260206004820152601760248201527f6f6e6c79206d696e74206f726967696e2077616c6c65740000000000000000006044820152606401610951565b601154831115610f0d5760405162461bcd60e51b815260206004820152601a60248201527f657863656564206d6178206d696e74207065722077616c6c65740000000000006044820152606401610951565b600f54600854610f1d90856138da565b1115610f6b5760405162461bcd60e51b815260206004820152601c60248201527f616d6f756e74206578636565642072656d61696e696e67206d696e74000000006044820152606401610951565b3483601254610f7a91906138f2565b1115610fc85760405162461bcd60e51b815260206004820152601160248201527f696e737566696369656e7420666f6e64730000000000000000000000000000006044820152606401610951565b60005b8381101561100557610fe1600c80546001019055565b610ff333610fee600c5490565b612aee565b80610ffd81613911565b915050610fcb565b50604051839033907f03504c294a263bdb2a84fae303527be6ac0fa4c271f02075b2162fd41d95882590600090a3505050565b600061104383611c07565b82106110b75760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e64730000000000000000000000000000000000000000006064820152608401610951565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b600a546001600160a01b031633146111285760405162461bcd60e51b81526020600482018190526024820152600080516020613ae08339815191526044820152606401610951565b600d5460049060ff16156111775760405162461bcd60e51b8152602060048201526016602482015275151a194818dbdb9d1c9858dd081a5cc81c185d5cd95960521b6044820152606401610951565b806004811115611189576111896137a3565b60165460ff1660048111156111a0576111a06137a3565b146111ff5760405162461bcd60e51b815260206004820152602960248201527f5468697320616374696f6e206973206e6f7420616c6c6f77656420696e20746860448201526869732073746174757360b81b6064820152608401610951565b50600d805461ff001916610100179055565b600a546001600160a01b031633146112595760405162461bcd60e51b81526020600482018190526024820152600080516020613ae08339815191526044820152606401610951565b600d5460049060ff16156112a85760405162461bcd60e51b8152602060048201526016602482015275151a194818dbdb9d1c9858dd081a5cc81c185d5cd95960521b6044820152606401610951565b8060048111156112ba576112ba6137a3565b60165460ff1660048111156112d1576112d16137a3565b146113305760405162461bcd60e51b815260206004820152602960248201527f5468697320616374696f6e206973206e6f7420616c6c6f77656420696e20746860448201526869732073746174757360b81b6064820152608401610951565b6002600b5414156113835760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610951565b6002600b55476113d55760405162461bcd60e51b815260206004820152600c60248201527f42616c616e6365206973203000000000000000000000000000000000000000006044820152606401610951565b600a546040516001600160a01b03909116904780156108fc02916000818181858888f1935050505015801561140e573d6000803e3d6000fd5b50506001600b55565b610aa383838360405180602001604052806000815250611ed5565b600d5460019060ff16156114815760405162461bcd60e51b8152602060048201526016602482015275151a194818dbdb9d1c9858dd081a5cc81c185d5cd95960521b6044820152606401610951565b806004811115611493576114936137a3565b60165460ff1660048111156114aa576114aa6137a3565b146115095760405162461bcd60e51b815260206004820152602960248201527f5468697320616374696f6e206973206e6f7420616c6c6f77656420696e20746860448201526869732073746174757360b81b6064820152608401610951565b816000811161155a5760405162461bcd60e51b815260206004820152601860248201527f6d696e696d756d206d696e7420616d6f756e74206973203100000000000000006044820152606401610951565b600f54600854106115985760405162461bcd60e51b815260206004820152600860248201526714dbdb190813dd5d60c21b6044820152606401610951565b3332146115e75760405162461bcd60e51b815260206004820152601760248201527f6f6e6c79206d696e74206f726967696e2077616c6c65740000000000000000006044820152606401610951565b336000908152600e602052604090205460ff166116465760405162461bcd60e51b815260206004820152601760248201527f61646472657373206e6f742077686974656c69737465640000000000000000006044820152606401610951565b6010548311156116985760405162461bcd60e51b815260206004820152601a60248201527f657863656564206d6178206d696e74207065722077616c6c65740000000000006044820152606401610951565b336000908152600e60205260409020600101548311156117205760405162461bcd60e51b815260206004820152602660248201527f6e6f7420616c6c6f776564206d696e74206d6f7265207468616e20616d6f756e60448201527f74206c65667400000000000000000000000000000000000000000000000000006064820152608401610951565b348360135461172f91906138f2565b111561177d5760405162461bcd60e51b815260206004820152601160248201527f696e737566696369656e7420666f6e64730000000000000000000000000000006044820152606401610951565b336000908152600e602052604081206001015461179b90859061392c565b10156117e95760405162461bcd60e51b815260206004820152600b60248201527f6e6f206e656761746976650000000000000000000000000000000000000000006044820152606401610951565b336000908152600e60205260408120600101805485929061180b90849061392c565b90915550600090505b8381101561184e5761182a600c80546001019055565b61183c33611837600c5490565b612b08565b8061184681613911565b915050611814565b50604051839033907f5de1bf30ef597e495a31fa8fb6f676431eca3fed01c951b2559def80fa93fd0890600090a3505050565b600061188c60085490565b82106119005760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e647300000000000000000000000000000000000000006064820152608401610951565b6008828154811061191357611913613943565b90600052602060002001549050919050565b600a546001600160a01b0316331461196d5760405162461bcd60e51b81526020600482018190526024820152600080516020613ae08339815191526044820152606401610951565b600d5460039060ff16156119bc5760405162461bcd60e51b8152602060048201526016602482015275151a194818dbdb9d1c9858dd081a5cc81c185d5cd95960521b6044820152606401610951565b8060048111156119ce576119ce6137a3565b60165460ff1660048111156119e5576119e56137a3565b14611a445760405162461bcd60e51b815260206004820152602960248201527f5468697320616374696f6e206973206e6f7420616c6c6f77656420696e20746860448201526869732073746174757360b81b6064820152608401610951565b8151610aa3906014906020850190613405565b6000818152600260205260408120546001600160a01b0316806108445760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610951565b600a546001600160a01b03163314611b2a5760405162461bcd60e51b81526020600482018190526024820152600080516020613ae08339815191526044820152606401610951565b600d5460009060ff1615611b795760405162461bcd60e51b8152602060048201526016602482015275151a194818dbdb9d1c9858dd081a5cc81c185d5cd95960521b6044820152606401610951565b806004811115611b8b57611b8b6137a3565b60165460ff166004811115611ba257611ba26137a3565b14611c015760405162461bcd60e51b815260206004820152602960248201527f5468697320616374696f6e206973206e6f7420616c6c6f77656420696e20746860448201526869732073746174757360b81b6064820152608401610951565b50600f55565b60006001600160a01b038216611c855760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610951565b506001600160a01b031660009081526003602052604090205490565b600a546001600160a01b03163314611ce95760405162461bcd60e51b81526020600482018190526024820152600080516020613ae08339815191526044820152606401610951565b611cf36000612c63565b565b600a546001600160a01b03163314611d3d5760405162461bcd60e51b81526020600482018190526024820152600080516020613ae08339815191526044820152606401610951565b600d5460009060ff1615611d8c5760405162461bcd60e51b8152602060048201526016602482015275151a194818dbdb9d1c9858dd081a5cc81c185d5cd95960521b6044820152606401610951565b806004811115611d9e57611d9e6137a3565b60165460ff166004811115611db557611db56137a3565b14611e145760405162461bcd60e51b815260206004820152602960248201527f5468697320616374696f6e206973206e6f7420616c6c6f77656420696e20746860448201526869732073746174757360b81b6064820152608401610951565b50601091909155601155565b60606001805461085990613889565b600a546001600160a01b03163314611e775760405162461bcd60e51b81526020600482018190526024820152600080516020613ae08339815191526044820152606401610951565b600d5460009060ff16156119bc5760405162461bcd60e51b8152602060048201526016602482015275151a194818dbdb9d1c9858dd081a5cc81c185d5cd95960521b6044820152606401610951565b611ed1338383612cc2565b5050565b611edf3383612812565b611f515760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610951565b611f5d84848484612d91565b50505050565b60158054611f7090613889565b80601f0160208091040260200160405190810160405280929190818152602001828054611f9c90613889565b8015611fe95780601f10611fbe57610100808354040283529160200191611fe9565b820191906000526020600020905b815481529060010190602001808311611fcc57829003601f168201915b505050505081565b6000818152600260205260409020546060906001600160a01b031661207e5760405162461bcd60e51b815260206004820152603060248201527f455243373231204d657461646174613a2055524920717565727920666f72206e60448201527f6f6e6578697374656e7420746f6b656e000000000000000000000000000000006064820152608401610951565b600260165460ff166004811115612097576120976137a3565b11156120d25760146120a883612e0f565b60156040516020016120bc939291906139f3565b6040516020818303038152906040529050919050565b60146040516020016120bc9190613a26565b919050565b600a546001600160a01b031633146121315760405162461bcd60e51b81526020600482018190526024820152600080516020613ae08339815191526044820152606401610951565b600d5460009060ff16156121805760405162461bcd60e51b8152602060048201526016602482015275151a194818dbdb9d1c9858dd081a5cc81c185d5cd95960521b6044820152606401610951565b806004811115612192576121926137a3565b60165460ff1660048111156121a9576121a96137a3565b146122085760405162461bcd60e51b815260206004820152602960248201527f5468697320616374696f6e206973206e6f7420616c6c6f77656420696e20746860448201526869732073746174757360b81b6064820152608401610951565b816122555760405162461bcd60e51b815260206004820152600c60248201527f4e6f2061646472657373657300000000000000000000000000000000000000006044820152606401610951565b60005b82811015611f5d57601054600e600086868581811061227957612279613943565b905060200201602081019061228e91906135d9565b6001600160a01b03166001600160a01b03168152602001908152602001600020600101819055506001600e60008686858181106122cd576122cd613943565b90506020020160208101906122e291906135d9565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905583838281811061231c5761231c613943565b905060200201602081019061233191906135d9565b6001600160a01b03167f8a3be376fdc726be3f3cee8e59ba5698a268a9b59f69cdabcf06d2ec2c90658f60405160405180910390a28061237081613911565b915050612258565b600a546001600160a01b031633146123c05760405162461bcd60e51b81526020600482018190526024820152600080516020613ae08339815191526044820152606401610951565b600d805460ff8082161560ff19909216821790925542601781905560408051929093161515825260208201527fd2a642be310b5beefe5c50f8cee7f67d7210962579bb3c8154f0cfc36d96b220910160405180910390a1565b60148054611f7090613889565b600a546001600160a01b0316331461246e5760405162461bcd60e51b81526020600482018190526024820152600080516020613ae08339815191526044820152606401610951565b600d5460009060ff16156124bd5760405162461bcd60e51b8152602060048201526016602482015275151a194818dbdb9d1c9858dd081a5cc81c185d5cd95960521b6044820152606401610951565b8060048111156124cf576124cf6137a3565b60165460ff1660048111156124e6576124e66137a3565b146125455760405162461bcd60e51b815260206004820152602960248201527f5468697320616374696f6e206973206e6f7420616c6c6f77656420696e20746860448201526869732073746174757360b81b6064820152608401610951565b50601391909155601255565b600a546001600160a01b031633146125995760405162461bcd60e51b81526020600482018190526024820152600080516020613ae08339815191526044820152606401610951565b600d5460ff16156125e55760405162461bcd60e51b8152602060048201526016602482015275151a194818dbdb9d1c9858dd081a5cc81c185d5cd95960521b6044820152606401610951565b60165460ff1660048111156125fc576125fc6137a3565b6126079060016138da565b6004811115612618576126186137a3565b6016805460ff19166001836004811115612634576126346137a3565b02179055504260175560165460ff166004811115612654576126546137a3565b6040514281527fc71bede083c0a5c534596a0a4b0d99c36da65f2219bd1601e500298b4e277c8c9060200160405180910390a2565b600a546001600160a01b031633146126d15760405162461bcd60e51b81526020600482018190526024820152600080516020613ae08339815191526044820152606401610951565b6001600160a01b03811661274d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610951565b61275681612c63565b50565b60006001600160e01b031982167f780e9d63000000000000000000000000000000000000000000000000000000001480610844575061084482612f41565b6000818152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03841690811790915581906127d982611a57565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b031661288b5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610951565b600061289683611a57565b9050806001600160a01b0316846001600160a01b031614806128dd57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806129015750836001600160a01b03166128f6846108dc565b6001600160a01b0316145b949350505050565b826001600160a01b031661291c82611a57565b6001600160a01b0316146129985760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610951565b6001600160a01b038216612a135760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610951565b612a1e838383612fdc565b612a29600082612797565b6001600160a01b0383166000908152600360205260408120805460019290612a5290849061392c565b90915550506001600160a01b0382166000908152600360205260408120805460019290612a809084906138da565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b611ed1828260405180602001604052806000815250612fe7565b6001600160a01b038216612b5e5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610951565b6000818152600260205260409020546001600160a01b031615612bc35760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610951565b612bcf60008383612fdc565b6001600160a01b0382166000908152600360205260408120805460019290612bf89084906138da565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600a80546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b03161415612d245760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610951565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612d9c848484612909565b612da884848484613065565b611f5d5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610951565b606081612e4f57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115612e795780612e6381613911565b9150612e729050600a83613a48565b9150612e53565b60008167ffffffffffffffff811115612e9457612e946135f4565b6040519080825280601f01601f191660200182016040528015612ebe576020820181803683370190505b5090505b841561290157612ed360018361392c565b9150612ee0600a86613a5c565b612eeb9060306138da565b60f81b818381518110612f0057612f00613943565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612f3a600a86613a48565b9450612ec2565b60006001600160e01b031982167f80ac58cd000000000000000000000000000000000000000000000000000000001480612fa457506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061084457507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610844565b610aa38383836131bd565b612ff18383612b08565b612ffe6000848484613065565b610aa35760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610951565b60006001600160a01b0384163b156131b257604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906130a9903390899088908890600401613a70565b602060405180830381600087803b1580156130c357600080fd5b505af19250505080156130f3575060408051601f3d908101601f191682019092526130f091810190613aac565b60015b613198573d808015613121576040519150601f19603f3d011682016040523d82523d6000602084013e613126565b606091505b5080516131905760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610951565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612901565b506001949350505050565b6001600160a01b0383166132185761321381600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b61323b565b816001600160a01b0316836001600160a01b03161461323b5761323b8382613275565b6001600160a01b03821661325257610aa381613312565b826001600160a01b0316826001600160a01b031614610aa357610aa382826133c1565b6000600161328284611c07565b61328c919061392c565b6000838152600760205260409020549091508082146132df576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906133249060019061392c565b6000838152600960205260408120546008805493945090928490811061334c5761334c613943565b90600052602060002001549050806008838154811061336d5761336d613943565b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806133a5576133a5613ac9565b6001900381819060005260206000200160009055905550505050565b60006133cc83611c07565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b82805461341190613889565b90600052602060002090601f0160209004810192826134335760008555613479565b82601f1061344c57805160ff1916838001178555613479565b82800160010185558215613479579182015b8281111561347957825182559160200191906001019061345e565b50613485929150613489565b5090565b5b80821115613485576000815560010161348a565b6001600160e01b03198116811461275657600080fd5b6000602082840312156134c657600080fd5b81356134d18161349e565b9392505050565b60005b838110156134f35781810151838201526020016134db565b83811115611f5d5750506000910152565b6000815180845261351c8160208601602086016134d8565b601f01601f19169290920160200192915050565b6020815260006134d16020830184613504565b60006020828403121561355557600080fd5b5035919050565b80356001600160a01b03811681146120e457600080fd5b6000806040838503121561358657600080fd5b61358f8361355c565b946020939093013593505050565b6000806000606084860312156135b257600080fd5b6135bb8461355c565b92506135c96020850161355c565b9150604084013590509250925092565b6000602082840312156135eb57600080fd5b6134d18261355c565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115613625576136256135f4565b604051601f8501601f19908116603f0116810190828211818310171561364d5761364d6135f4565b8160405280935085815286868601111561366657600080fd5b858560208301376000602087830101525050509392505050565b60006020828403121561369257600080fd5b813567ffffffffffffffff8111156136a957600080fd5b8201601f810184136136ba57600080fd5b6129018482356020840161360a565b600080604083850312156136dc57600080fd5b50508035926020909101359150565b600080604083850312156136fe57600080fd5b6137078361355c565b91506020830135801515811461371c57600080fd5b809150509250929050565b6000806000806080858703121561373d57600080fd5b6137468561355c565b93506137546020860161355c565b925060408501359150606085013567ffffffffffffffff81111561377757600080fd5b8501601f8101871361378857600080fd5b6137978782356020840161360a565b91505092959194509250565b634e487b7160e01b600052602160045260246000fd5b60208101600583106137db57634e487b7160e01b600052602160045260246000fd5b91905290565b600080602083850312156137f457600080fd5b823567ffffffffffffffff8082111561380c57600080fd5b818501915085601f83011261382057600080fd5b81358181111561382f57600080fd5b8660208260051b850101111561384457600080fd5b60209290920196919550909350505050565b6000806040838503121561386957600080fd5b6138728361355c565b91506138806020840161355c565b90509250929050565b600181811c9082168061389d57607f821691505b602082108114156138be57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156138ed576138ed6138c4565b500190565b600081600019048311821515161561390c5761390c6138c4565b500290565b6000600019821415613925576139256138c4565b5060010190565b60008282101561393e5761393e6138c4565b500390565b634e487b7160e01b600052603260045260246000fd5b8054600090600181811c908083168061397357607f831692505b602080841082141561399557634e487b7160e01b600052602260045260246000fd5b8180156139a957600181146139ba576139e7565b60ff198616895284890196506139e7565b60008881526020902060005b868110156139df5781548b8201529085019083016139c6565b505084890196505b50505050505092915050565b60006139ff8286613959565b8451613a0f8183602089016134d8565b613a1b81830186613959565b979650505050505050565b60006134d18284613959565b634e487b7160e01b600052601260045260246000fd5b600082613a5757613a57613a32565b500490565b600082613a6b57613a6b613a32565b500690565b60006001600160a01b03808716835280861660208401525083604083015260806060830152613aa26080830184613504565b9695505050505050565b600060208284031215613abe57600080fd5b81516134d18161349e565b634e487b7160e01b600052603160045260246000fdfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220ebbeeb24dc3a5dea4dd62fba7831924fd59b31cdf889d13f11a108ceb240c29d64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106102e75760003560e01c8063715018a611610184578063c6682862116100d6578063e1fcd7071161008a578063ecdab32611610064578063ecdab326146107e4578063ee3743ab14610804578063f2fde38b1461081957600080fd5b8063e1fcd70714610770578063e985e9c514610786578063eac989f8146107cf57600080fd5b8063d3bcbb3c116100bb578063d3bcbb3c14610725578063d431b1ac14610745578063d5abeb011461075a57600080fd5b8063c6682862146106f0578063c87b56dd1461070557600080fd5b8063a0bcfc7f11610138578063b88d4fde11610112578063b88d4fde14610658578063c040e6b814610678578063c166d13d1461069f57600080fd5b8063a0bcfc7f146105fe578063a22cb4651461061e578063b187bd261461063e57600080fd5b80638da5cb5b116101695780638da5cb5b146105b55780638f708bcf146105d357806395d89b41146105e957600080fd5b8063715018a6146105805780637bd4f0711461059557600080fd5b80633b37d1d61161023d57806350179bae116101f15780636352211e116101cb5780636352211e146105205780636f8b44b01461054057806370a082311461056057600080fd5b806350179bae146104cb5780635dc96d16146104eb5780635fd51b371461050a57600080fd5b806342842e0e1161022257806342842e0e1461047857806347d6b593146104985780634f6ccce7146104ab57600080fd5b80633b37d1d61461045b5780633ccfd60b1461047057600080fd5b80631c18a0621161029f5780632db11544116102795780632db11544146104125780632e7b26a7146104255780632f745c591461043b57600080fd5b80631c18a062146103bc57806323b872dd146103d2578063286dd3f5146103f257600080fd5b8063081812fc116102d0578063081812fc14610343578063095ea7b31461037b57806318160ddd1461039d57600080fd5b806301ffc9a7146102ec57806306fdde0314610321575b600080fd5b3480156102f857600080fd5b5061030c6103073660046134b4565b610839565b60405190151581526020015b60405180910390f35b34801561032d57600080fd5b5061033661084a565b6040516103189190613530565b34801561034f57600080fd5b5061036361035e366004613543565b6108dc565b6040516001600160a01b039091168152602001610318565b34801561038757600080fd5b5061039b610396366004613573565b610976565b005b3480156103a957600080fd5b506008545b604051908152602001610318565b3480156103c857600080fd5b506103ae60125481565b3480156103de57600080fd5b5061039b6103ed36600461359d565b610aa8565b3480156103fe57600080fd5b5061039b61040d3660046135d9565b610b2f565b61039b610420366004613543565b610d06565b34801561043157600080fd5b506103ae60105481565b34801561044757600080fd5b506103ae610456366004613573565b611038565b34801561046757600080fd5b5061039b6110e0565b61039b611211565b34801561048457600080fd5b5061039b61049336600461359d565b611417565b61039b6104a6366004613543565b611432565b3480156104b757600080fd5b506103ae6104c6366004613543565b611881565b3480156104d757600080fd5b5061039b6104e6366004613680565b611925565b3480156104f757600080fd5b50600d5461030c90610100900460ff1681565b34801561051657600080fd5b506103ae60175481565b34801561052c57600080fd5b5061036361053b366004613543565b611a57565b34801561054c57600080fd5b5061039b61055b366004613543565b611ae2565b34801561056c57600080fd5b506103ae61057b3660046135d9565b611c07565b34801561058c57600080fd5b5061039b611ca1565b3480156105a157600080fd5b5061039b6105b03660046136c9565b611cf5565b3480156105c157600080fd5b50600a546001600160a01b0316610363565b3480156105df57600080fd5b506103ae60135481565b3480156105f557600080fd5b50610336611e20565b34801561060a57600080fd5b5061039b610619366004613680565b611e2f565b34801561062a57600080fd5b5061039b6106393660046136eb565b611ec6565b34801561064a57600080fd5b50600d5461030c9060ff1681565b34801561066457600080fd5b5061039b610673366004613727565b611ed5565b34801561068457600080fd5b506016546106929060ff1681565b60405161031891906137b9565b3480156106ab57600080fd5b506106d96106ba3660046135d9565b600e602052600090815260409020805460019091015460ff9091169082565b604080519215158352602083019190915201610318565b3480156106fc57600080fd5b50610336611f63565b34801561071157600080fd5b50610336610720366004613543565b611ff1565b34801561073157600080fd5b5061039b6107403660046137e1565b6120e9565b34801561075157600080fd5b5061039b612378565b34801561076657600080fd5b506103ae600f5481565b34801561077c57600080fd5b506103ae60115481565b34801561079257600080fd5b5061030c6107a1366004613856565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b3480156107db57600080fd5b50610336612419565b3480156107f057600080fd5b5061039b6107ff3660046136c9565b612426565b34801561081057600080fd5b5061039b612551565b34801561082557600080fd5b5061039b6108343660046135d9565b612689565b600061084482612759565b92915050565b60606000805461085990613889565b80601f016020809104026020016040519081016040528092919081815260200182805461088590613889565b80156108d25780601f106108a7576101008083540402835291602001916108d2565b820191906000526020600020905b8154815290600101906020018083116108b557829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b031661095a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061098182611a57565b9050806001600160a01b0316836001600160a01b03161415610a0b5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610951565b336001600160a01b0382161480610a275750610a2781336107a1565b610a995760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610951565b610aa38383612797565b505050565b610ab23382612812565b610b245760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610951565b610aa3838383612909565b600a546001600160a01b03163314610b775760405162461bcd60e51b81526020600482018190526024820152600080516020613ae08339815191526044820152606401610951565b600d5460009060ff1615610bc65760405162461bcd60e51b8152602060048201526016602482015275151a194818dbdb9d1c9858dd081a5cc81c185d5cd95960521b6044820152606401610951565b806004811115610bd857610bd86137a3565b60165460ff166004811115610bef57610bef6137a3565b14610c4e5760405162461bcd60e51b815260206004820152602960248201527f5468697320616374696f6e206973206e6f7420616c6c6f77656420696e20746860448201526869732073746174757360b81b6064820152608401610951565b6001600160a01b0382166000908152600e602052604090205460ff16610cb65760405162461bcd60e51b815260206004820152601a60248201527f41646472657373206973206e6f742077686974656c69737465640000000000006044820152606401610951565b6001600160a01b0382166000818152600e6020526040808220805460ff19168155600101829055517f9354cd337eebad48c93d70f7321b188732c3061fa5c48fe32b8e6f9480c52fcc9190a25050565b600d5460029060ff1615610d555760405162461bcd60e51b8152602060048201526016602482015275151a194818dbdb9d1c9858dd081a5cc81c185d5cd95960521b6044820152606401610951565b806004811115610d6757610d676137a3565b60165460ff166004811115610d7e57610d7e6137a3565b14610ddd5760405162461bcd60e51b815260206004820152602960248201527f5468697320616374696f6e206973206e6f7420616c6c6f77656420696e20746860448201526869732073746174757360b81b6064820152608401610951565b8160008111610e2e5760405162461bcd60e51b815260206004820152601860248201527f6d696e696d756d206d696e7420616d6f756e74206973203100000000000000006044820152606401610951565b600f5460085410610e6c5760405162461bcd60e51b815260206004820152600860248201526714dbdb190813dd5d60c21b6044820152606401610951565b333214610ebb5760405162461bcd60e51b815260206004820152601760248201527f6f6e6c79206d696e74206f726967696e2077616c6c65740000000000000000006044820152606401610951565b601154831115610f0d5760405162461bcd60e51b815260206004820152601a60248201527f657863656564206d6178206d696e74207065722077616c6c65740000000000006044820152606401610951565b600f54600854610f1d90856138da565b1115610f6b5760405162461bcd60e51b815260206004820152601c60248201527f616d6f756e74206578636565642072656d61696e696e67206d696e74000000006044820152606401610951565b3483601254610f7a91906138f2565b1115610fc85760405162461bcd60e51b815260206004820152601160248201527f696e737566696369656e7420666f6e64730000000000000000000000000000006044820152606401610951565b60005b8381101561100557610fe1600c80546001019055565b610ff333610fee600c5490565b612aee565b80610ffd81613911565b915050610fcb565b50604051839033907f03504c294a263bdb2a84fae303527be6ac0fa4c271f02075b2162fd41d95882590600090a3505050565b600061104383611c07565b82106110b75760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e64730000000000000000000000000000000000000000006064820152608401610951565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b600a546001600160a01b031633146111285760405162461bcd60e51b81526020600482018190526024820152600080516020613ae08339815191526044820152606401610951565b600d5460049060ff16156111775760405162461bcd60e51b8152602060048201526016602482015275151a194818dbdb9d1c9858dd081a5cc81c185d5cd95960521b6044820152606401610951565b806004811115611189576111896137a3565b60165460ff1660048111156111a0576111a06137a3565b146111ff5760405162461bcd60e51b815260206004820152602960248201527f5468697320616374696f6e206973206e6f7420616c6c6f77656420696e20746860448201526869732073746174757360b81b6064820152608401610951565b50600d805461ff001916610100179055565b600a546001600160a01b031633146112595760405162461bcd60e51b81526020600482018190526024820152600080516020613ae08339815191526044820152606401610951565b600d5460049060ff16156112a85760405162461bcd60e51b8152602060048201526016602482015275151a194818dbdb9d1c9858dd081a5cc81c185d5cd95960521b6044820152606401610951565b8060048111156112ba576112ba6137a3565b60165460ff1660048111156112d1576112d16137a3565b146113305760405162461bcd60e51b815260206004820152602960248201527f5468697320616374696f6e206973206e6f7420616c6c6f77656420696e20746860448201526869732073746174757360b81b6064820152608401610951565b6002600b5414156113835760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610951565b6002600b55476113d55760405162461bcd60e51b815260206004820152600c60248201527f42616c616e6365206973203000000000000000000000000000000000000000006044820152606401610951565b600a546040516001600160a01b03909116904780156108fc02916000818181858888f1935050505015801561140e573d6000803e3d6000fd5b50506001600b55565b610aa383838360405180602001604052806000815250611ed5565b600d5460019060ff16156114815760405162461bcd60e51b8152602060048201526016602482015275151a194818dbdb9d1c9858dd081a5cc81c185d5cd95960521b6044820152606401610951565b806004811115611493576114936137a3565b60165460ff1660048111156114aa576114aa6137a3565b146115095760405162461bcd60e51b815260206004820152602960248201527f5468697320616374696f6e206973206e6f7420616c6c6f77656420696e20746860448201526869732073746174757360b81b6064820152608401610951565b816000811161155a5760405162461bcd60e51b815260206004820152601860248201527f6d696e696d756d206d696e7420616d6f756e74206973203100000000000000006044820152606401610951565b600f54600854106115985760405162461bcd60e51b815260206004820152600860248201526714dbdb190813dd5d60c21b6044820152606401610951565b3332146115e75760405162461bcd60e51b815260206004820152601760248201527f6f6e6c79206d696e74206f726967696e2077616c6c65740000000000000000006044820152606401610951565b336000908152600e602052604090205460ff166116465760405162461bcd60e51b815260206004820152601760248201527f61646472657373206e6f742077686974656c69737465640000000000000000006044820152606401610951565b6010548311156116985760405162461bcd60e51b815260206004820152601a60248201527f657863656564206d6178206d696e74207065722077616c6c65740000000000006044820152606401610951565b336000908152600e60205260409020600101548311156117205760405162461bcd60e51b815260206004820152602660248201527f6e6f7420616c6c6f776564206d696e74206d6f7265207468616e20616d6f756e60448201527f74206c65667400000000000000000000000000000000000000000000000000006064820152608401610951565b348360135461172f91906138f2565b111561177d5760405162461bcd60e51b815260206004820152601160248201527f696e737566696369656e7420666f6e64730000000000000000000000000000006044820152606401610951565b336000908152600e602052604081206001015461179b90859061392c565b10156117e95760405162461bcd60e51b815260206004820152600b60248201527f6e6f206e656761746976650000000000000000000000000000000000000000006044820152606401610951565b336000908152600e60205260408120600101805485929061180b90849061392c565b90915550600090505b8381101561184e5761182a600c80546001019055565b61183c33611837600c5490565b612b08565b8061184681613911565b915050611814565b50604051839033907f5de1bf30ef597e495a31fa8fb6f676431eca3fed01c951b2559def80fa93fd0890600090a3505050565b600061188c60085490565b82106119005760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e647300000000000000000000000000000000000000006064820152608401610951565b6008828154811061191357611913613943565b90600052602060002001549050919050565b600a546001600160a01b0316331461196d5760405162461bcd60e51b81526020600482018190526024820152600080516020613ae08339815191526044820152606401610951565b600d5460039060ff16156119bc5760405162461bcd60e51b8152602060048201526016602482015275151a194818dbdb9d1c9858dd081a5cc81c185d5cd95960521b6044820152606401610951565b8060048111156119ce576119ce6137a3565b60165460ff1660048111156119e5576119e56137a3565b14611a445760405162461bcd60e51b815260206004820152602960248201527f5468697320616374696f6e206973206e6f7420616c6c6f77656420696e20746860448201526869732073746174757360b81b6064820152608401610951565b8151610aa3906014906020850190613405565b6000818152600260205260408120546001600160a01b0316806108445760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610951565b600a546001600160a01b03163314611b2a5760405162461bcd60e51b81526020600482018190526024820152600080516020613ae08339815191526044820152606401610951565b600d5460009060ff1615611b795760405162461bcd60e51b8152602060048201526016602482015275151a194818dbdb9d1c9858dd081a5cc81c185d5cd95960521b6044820152606401610951565b806004811115611b8b57611b8b6137a3565b60165460ff166004811115611ba257611ba26137a3565b14611c015760405162461bcd60e51b815260206004820152602960248201527f5468697320616374696f6e206973206e6f7420616c6c6f77656420696e20746860448201526869732073746174757360b81b6064820152608401610951565b50600f55565b60006001600160a01b038216611c855760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610951565b506001600160a01b031660009081526003602052604090205490565b600a546001600160a01b03163314611ce95760405162461bcd60e51b81526020600482018190526024820152600080516020613ae08339815191526044820152606401610951565b611cf36000612c63565b565b600a546001600160a01b03163314611d3d5760405162461bcd60e51b81526020600482018190526024820152600080516020613ae08339815191526044820152606401610951565b600d5460009060ff1615611d8c5760405162461bcd60e51b8152602060048201526016602482015275151a194818dbdb9d1c9858dd081a5cc81c185d5cd95960521b6044820152606401610951565b806004811115611d9e57611d9e6137a3565b60165460ff166004811115611db557611db56137a3565b14611e145760405162461bcd60e51b815260206004820152602960248201527f5468697320616374696f6e206973206e6f7420616c6c6f77656420696e20746860448201526869732073746174757360b81b6064820152608401610951565b50601091909155601155565b60606001805461085990613889565b600a546001600160a01b03163314611e775760405162461bcd60e51b81526020600482018190526024820152600080516020613ae08339815191526044820152606401610951565b600d5460009060ff16156119bc5760405162461bcd60e51b8152602060048201526016602482015275151a194818dbdb9d1c9858dd081a5cc81c185d5cd95960521b6044820152606401610951565b611ed1338383612cc2565b5050565b611edf3383612812565b611f515760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610951565b611f5d84848484612d91565b50505050565b60158054611f7090613889565b80601f0160208091040260200160405190810160405280929190818152602001828054611f9c90613889565b8015611fe95780601f10611fbe57610100808354040283529160200191611fe9565b820191906000526020600020905b815481529060010190602001808311611fcc57829003601f168201915b505050505081565b6000818152600260205260409020546060906001600160a01b031661207e5760405162461bcd60e51b815260206004820152603060248201527f455243373231204d657461646174613a2055524920717565727920666f72206e60448201527f6f6e6578697374656e7420746f6b656e000000000000000000000000000000006064820152608401610951565b600260165460ff166004811115612097576120976137a3565b11156120d25760146120a883612e0f565b60156040516020016120bc939291906139f3565b6040516020818303038152906040529050919050565b60146040516020016120bc9190613a26565b919050565b600a546001600160a01b031633146121315760405162461bcd60e51b81526020600482018190526024820152600080516020613ae08339815191526044820152606401610951565b600d5460009060ff16156121805760405162461bcd60e51b8152602060048201526016602482015275151a194818dbdb9d1c9858dd081a5cc81c185d5cd95960521b6044820152606401610951565b806004811115612192576121926137a3565b60165460ff1660048111156121a9576121a96137a3565b146122085760405162461bcd60e51b815260206004820152602960248201527f5468697320616374696f6e206973206e6f7420616c6c6f77656420696e20746860448201526869732073746174757360b81b6064820152608401610951565b816122555760405162461bcd60e51b815260206004820152600c60248201527f4e6f2061646472657373657300000000000000000000000000000000000000006044820152606401610951565b60005b82811015611f5d57601054600e600086868581811061227957612279613943565b905060200201602081019061228e91906135d9565b6001600160a01b03166001600160a01b03168152602001908152602001600020600101819055506001600e60008686858181106122cd576122cd613943565b90506020020160208101906122e291906135d9565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905583838281811061231c5761231c613943565b905060200201602081019061233191906135d9565b6001600160a01b03167f8a3be376fdc726be3f3cee8e59ba5698a268a9b59f69cdabcf06d2ec2c90658f60405160405180910390a28061237081613911565b915050612258565b600a546001600160a01b031633146123c05760405162461bcd60e51b81526020600482018190526024820152600080516020613ae08339815191526044820152606401610951565b600d805460ff8082161560ff19909216821790925542601781905560408051929093161515825260208201527fd2a642be310b5beefe5c50f8cee7f67d7210962579bb3c8154f0cfc36d96b220910160405180910390a1565b60148054611f7090613889565b600a546001600160a01b0316331461246e5760405162461bcd60e51b81526020600482018190526024820152600080516020613ae08339815191526044820152606401610951565b600d5460009060ff16156124bd5760405162461bcd60e51b8152602060048201526016602482015275151a194818dbdb9d1c9858dd081a5cc81c185d5cd95960521b6044820152606401610951565b8060048111156124cf576124cf6137a3565b60165460ff1660048111156124e6576124e66137a3565b146125455760405162461bcd60e51b815260206004820152602960248201527f5468697320616374696f6e206973206e6f7420616c6c6f77656420696e20746860448201526869732073746174757360b81b6064820152608401610951565b50601391909155601255565b600a546001600160a01b031633146125995760405162461bcd60e51b81526020600482018190526024820152600080516020613ae08339815191526044820152606401610951565b600d5460ff16156125e55760405162461bcd60e51b8152602060048201526016602482015275151a194818dbdb9d1c9858dd081a5cc81c185d5cd95960521b6044820152606401610951565b60165460ff1660048111156125fc576125fc6137a3565b6126079060016138da565b6004811115612618576126186137a3565b6016805460ff19166001836004811115612634576126346137a3565b02179055504260175560165460ff166004811115612654576126546137a3565b6040514281527fc71bede083c0a5c534596a0a4b0d99c36da65f2219bd1601e500298b4e277c8c9060200160405180910390a2565b600a546001600160a01b031633146126d15760405162461bcd60e51b81526020600482018190526024820152600080516020613ae08339815191526044820152606401610951565b6001600160a01b03811661274d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610951565b61275681612c63565b50565b60006001600160e01b031982167f780e9d63000000000000000000000000000000000000000000000000000000001480610844575061084482612f41565b6000818152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03841690811790915581906127d982611a57565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b031661288b5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610951565b600061289683611a57565b9050806001600160a01b0316846001600160a01b031614806128dd57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806129015750836001600160a01b03166128f6846108dc565b6001600160a01b0316145b949350505050565b826001600160a01b031661291c82611a57565b6001600160a01b0316146129985760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610951565b6001600160a01b038216612a135760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610951565b612a1e838383612fdc565b612a29600082612797565b6001600160a01b0383166000908152600360205260408120805460019290612a5290849061392c565b90915550506001600160a01b0382166000908152600360205260408120805460019290612a809084906138da565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b611ed1828260405180602001604052806000815250612fe7565b6001600160a01b038216612b5e5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610951565b6000818152600260205260409020546001600160a01b031615612bc35760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610951565b612bcf60008383612fdc565b6001600160a01b0382166000908152600360205260408120805460019290612bf89084906138da565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600a80546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b03161415612d245760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610951565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612d9c848484612909565b612da884848484613065565b611f5d5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610951565b606081612e4f57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115612e795780612e6381613911565b9150612e729050600a83613a48565b9150612e53565b60008167ffffffffffffffff811115612e9457612e946135f4565b6040519080825280601f01601f191660200182016040528015612ebe576020820181803683370190505b5090505b841561290157612ed360018361392c565b9150612ee0600a86613a5c565b612eeb9060306138da565b60f81b818381518110612f0057612f00613943565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612f3a600a86613a48565b9450612ec2565b60006001600160e01b031982167f80ac58cd000000000000000000000000000000000000000000000000000000001480612fa457506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061084457507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610844565b610aa38383836131bd565b612ff18383612b08565b612ffe6000848484613065565b610aa35760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610951565b60006001600160a01b0384163b156131b257604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906130a9903390899088908890600401613a70565b602060405180830381600087803b1580156130c357600080fd5b505af19250505080156130f3575060408051601f3d908101601f191682019092526130f091810190613aac565b60015b613198573d808015613121576040519150601f19603f3d011682016040523d82523d6000602084013e613126565b606091505b5080516131905760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610951565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612901565b506001949350505050565b6001600160a01b0383166132185761321381600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b61323b565b816001600160a01b0316836001600160a01b03161461323b5761323b8382613275565b6001600160a01b03821661325257610aa381613312565b826001600160a01b0316826001600160a01b031614610aa357610aa382826133c1565b6000600161328284611c07565b61328c919061392c565b6000838152600760205260409020549091508082146132df576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906133249060019061392c565b6000838152600960205260408120546008805493945090928490811061334c5761334c613943565b90600052602060002001549050806008838154811061336d5761336d613943565b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806133a5576133a5613ac9565b6001900381819060005260206000200160009055905550505050565b60006133cc83611c07565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b82805461341190613889565b90600052602060002090601f0160209004810192826134335760008555613479565b82601f1061344c57805160ff1916838001178555613479565b82800160010185558215613479579182015b8281111561347957825182559160200191906001019061345e565b50613485929150613489565b5090565b5b80821115613485576000815560010161348a565b6001600160e01b03198116811461275657600080fd5b6000602082840312156134c657600080fd5b81356134d18161349e565b9392505050565b60005b838110156134f35781810151838201526020016134db565b83811115611f5d5750506000910152565b6000815180845261351c8160208601602086016134d8565b601f01601f19169290920160200192915050565b6020815260006134d16020830184613504565b60006020828403121561355557600080fd5b5035919050565b80356001600160a01b03811681146120e457600080fd5b6000806040838503121561358657600080fd5b61358f8361355c565b946020939093013593505050565b6000806000606084860312156135b257600080fd5b6135bb8461355c565b92506135c96020850161355c565b9150604084013590509250925092565b6000602082840312156135eb57600080fd5b6134d18261355c565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115613625576136256135f4565b604051601f8501601f19908116603f0116810190828211818310171561364d5761364d6135f4565b8160405280935085815286868601111561366657600080fd5b858560208301376000602087830101525050509392505050565b60006020828403121561369257600080fd5b813567ffffffffffffffff8111156136a957600080fd5b8201601f810184136136ba57600080fd5b6129018482356020840161360a565b600080604083850312156136dc57600080fd5b50508035926020909101359150565b600080604083850312156136fe57600080fd5b6137078361355c565b91506020830135801515811461371c57600080fd5b809150509250929050565b6000806000806080858703121561373d57600080fd5b6137468561355c565b93506137546020860161355c565b925060408501359150606085013567ffffffffffffffff81111561377757600080fd5b8501601f8101871361378857600080fd5b6137978782356020840161360a565b91505092959194509250565b634e487b7160e01b600052602160045260246000fd5b60208101600583106137db57634e487b7160e01b600052602160045260246000fd5b91905290565b600080602083850312156137f457600080fd5b823567ffffffffffffffff8082111561380c57600080fd5b818501915085601f83011261382057600080fd5b81358181111561382f57600080fd5b8660208260051b850101111561384457600080fd5b60209290920196919550909350505050565b6000806040838503121561386957600080fd5b6138728361355c565b91506138806020840161355c565b90509250929050565b600181811c9082168061389d57607f821691505b602082108114156138be57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156138ed576138ed6138c4565b500190565b600081600019048311821515161561390c5761390c6138c4565b500290565b6000600019821415613925576139256138c4565b5060010190565b60008282101561393e5761393e6138c4565b500390565b634e487b7160e01b600052603260045260246000fd5b8054600090600181811c908083168061397357607f831692505b602080841082141561399557634e487b7160e01b600052602260045260246000fd5b8180156139a957600181146139ba576139e7565b60ff198616895284890196506139e7565b60008881526020902060005b868110156139df5781548b8201529085019083016139c6565b505084890196505b50505050505092915050565b60006139ff8286613959565b8451613a0f8183602089016134d8565b613a1b81830186613959565b979650505050505050565b60006134d18284613959565b634e487b7160e01b600052601260045260246000fd5b600082613a5757613a57613a32565b500490565b600082613a6b57613a6b613a32565b500690565b60006001600160a01b03808716835280861660208401525083604083015260806060830152613aa26080830184613504565b9695505050505050565b600060208284031215613abe57600080fd5b81516134d18161349e565b634e487b7160e01b600052603160045260246000fdfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220ebbeeb24dc3a5dea4dd62fba7831924fd59b31cdf889d13f11a108ceb240c29d64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 170,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 172,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 176,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 180,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 184,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 190,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1159,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1163,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1166,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1170,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 115,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "_status",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2204,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(Counter)1863_storage"
      },
      {
        "astId": 2206,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "isPaused",
        "offset": 0,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 2208,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "burnEnabled",
        "offset": 1,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 2213,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "whiteListedAddress",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_struct(WhitelistData)2197_storage)"
      },
      {
        "astId": 2215,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "maxSupply",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2217,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "maxMintPerWalletWhite",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 2219,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "maxMintPerWalletPublic",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 2221,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "mintPricePublic",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 2223,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "mintPriceWhite",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 2225,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "uri",
        "offset": 0,
        "slot": "20",
        "type": "t_string_storage"
      },
      {
        "astId": 2228,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "baseExtension",
        "offset": 0,
        "slot": "21",
        "type": "t_string_storage"
      },
      {
        "astId": 2231,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "stage",
        "offset": 0,
        "slot": "22",
        "type": "t_enum(MintStage)2192"
      },
      {
        "astId": 2233,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "lastActivity",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(MintStage)2192": {
        "encoding": "inplace",
        "label": "enum NftMintStage.MintStage",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(WhitelistData)2197_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct NftMintStage.WhitelistData)",
        "numberOfBytes": "32",
        "value": "t_struct(WhitelistData)2197_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1863_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1862,
            "contract": "contracts/NftMintStage.sol:NftMintStage",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(WhitelistData)2197_storage": {
        "encoding": "inplace",
        "label": "struct NftMintStage.WhitelistData",
        "members": [
          {
            "astId": 2194,
            "contract": "contracts/NftMintStage.sol:NftMintStage",
            "label": "isWhiteListed",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2196,
            "contract": "contracts/NftMintStage.sol:NftMintStage",
            "label": "allowedMints",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}