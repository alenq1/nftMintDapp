{
  "address": "0x788de24499A84f9EbcB47d9A4D6CD5ccaEeb9b6f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "maxSupply_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxMintPerWalletPublic_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxMintPerWalletWhite_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintPricePublic_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintPriceWhite_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "whitelistAddress",
          "type": "address"
        }
      ],
      "name": "AddedToWhiteList",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PublicMintEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "removedAddress",
          "type": "address"
        }
      ],
      "name": "RemovedFromWhiteList",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isPaused",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "SetPause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum NftMintStage.MintStage",
          "name": "",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "StageChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WhiteMintEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "msgSender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "addAddressToWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseExtension",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastActivity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMintPerWalletPublic",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMintPerWalletWhite",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintPricePublic",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintPriceWhite",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextStage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "publicMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeAddressFromWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri_",
          "type": "string"
        }
      ],
      "name": "revealCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri_",
          "type": "string"
        }
      ],
      "name": "setBaseUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxMintPerWalletWhite_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxMintPerWalletPublic_",
          "type": "uint256"
        }
      ],
      "name": "setMaxMintPerWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxSupply_",
          "type": "uint256"
        }
      ],
      "name": "setMaxSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mintPriceWhite_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintPricePublic_",
          "type": "uint256"
        }
      ],
      "name": "setMintPrices",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stage",
      "outputs": [
        {
          "internalType": "enum NftMintStage.MintStage",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whiteListedAddress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isWhiteListed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "allowedMints",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "whiteMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6c2024411726c82364bc124ccc2fc4e486d7a3cd0059fabaa67717effa9f4b0a",
  "receipt": {
    "to": null,
    "from": "0x06474AD123a46274b82d0d7Fbe010fBA23c6ed70",
    "contractAddress": "0x788de24499A84f9EbcB47d9A4D6CD5ccaEeb9b6f",
    "transactionIndex": 31,
    "gasUsed": "5531568",
    "logsBloom": "0x
    "blockHash": "0x831b9aeed9ada5239387c3e9782952778468402fa0890b306f5b849b860241f7",
    "transactionHash": "0x6c2024411726c82364bc124ccc2fc4e486d7a3cd0059fabaa67717effa9f4b0a",
    "logs": [
      {
        "transactionIndex": 31,
        "blockNumber": 10646483,
        "transactionHash": "0x6c2024411726c82364bc124ccc2fc4e486d7a3cd0059fabaa67717effa9f4b0a",
        "address": "0x788de24499A84f9EbcB47d9A4D6CD5ccaEeb9b6f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000006474ad123a46274b82d0d7fbe010fba23c6ed70"
        ],
        "data": "0x",
        "logIndex": 32,
        "blockHash": "0x831b9aeed9ada5239387c3e9782952778468402fa0890b306f5b849b860241f7"
      }
    ],
    "blockNumber": 10646483,
    "cumulativeGasUsed": "14796427",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Pixel Invaders v1",
    "PIXINV",
    0,
    0,
    0,
    "10000000000000000",
    "20000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "a9cd1089ba52cc31073722b1b5ef904f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMintPerWalletPublic_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMintPerWalletWhite_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintPricePublic_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintPriceWhite_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whitelistAddress\",\"type\":\"address\"}],\"name\":\"AddedToWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PublicMintEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removedAddress\",\"type\":\"address\"}],\"name\":\"RemovedFromWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SetPause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum NftMintStage.MintStage\",\"name\":\"\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"StageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WhiteMintEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addAddressToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseExtension\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastActivity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintPerWalletPublic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintPerWalletWhite\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPricePublic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPriceWhite\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"publicMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"revealCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxMintPerWalletWhite_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMintPerWalletPublic_\",\"type\":\"uint256\"}],\"name\":\"setMaxMintPerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSupply_\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintPriceWhite_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintPricePublic_\",\"type\":\"uint256\"}],\"name\":\"setMintPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"internalType\":\"enum NftMintStage.MintStage\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteListedAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isWhiteListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"allowedMints\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"whiteMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NftMintStage.sol\":\"NftMintStage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/NftMintStage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\"; \\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract NftMintStage is ERC721, ERC721Enumerable, Ownable, ReentrancyGuard {\\n    \\n\\n    enum MintStage {        \\n        INITIATED,       \\n        WHITEMINT,\\n        PUBLICMINT,\\n        REVEAL,        \\n        FINISHED\\n    }\\n\\n    struct WhitelistData {\\n        bool isWhiteListed;\\n        uint256 allowedMints;\\n\\n    }\\n\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenIdCounter;\\n    \\n    bool public isPaused;   \\n    bool public burnEnabled;    \\n    uint public whitelistCount;\\n    mapping(address => WhitelistData) public whiteListedAddress;    \\n    uint256 public maxSupply;\\n    uint256 public maxMintPerWalletWhite;\\n    uint256 public maxMintPerWalletPublic;    \\n    uint256 public mintPricePublic;\\n    uint256 public mintPriceWhite; \\n    string public uri;       \\n    string public baseExtension = \\\".json\\\";\\n    MintStage public stage;\\n    uint256 public lastActivity;\\n    \\n    \\n    constructor(\\n        string memory name_, \\n        string memory symbol_,\\n        uint256 maxSupply_,\\n        uint256 maxMintPerWalletPublic_,\\n        uint256 maxMintPerWalletWhite_,        \\n        uint256 mintPricePublic_,\\n        uint256 mintPriceWhite_\\n    ) \\n        ERC721(name_, symbol_){                \\n        burnEnabled = false;      \\n        maxSupply = maxSupply_;\\n        maxMintPerWalletPublic = maxMintPerWalletPublic_;\\n        maxMintPerWalletWhite = maxMintPerWalletWhite_;\\n        mintPricePublic = mintPricePublic_;\\n        mintPriceWhite = mintPriceWhite_;\\n        lastActivity = block.timestamp;\\n        stage = MintStage.INITIATED;\\n\\n        //mintPricePublic = mintPricePublic_;\\n        //mintPriceWhite = mintPriceWhite_;\\n        \\n    }\\n\\n\\n    modifier atStage(MintStage _stage) {\\n        require(!isPaused, \\\"The contract is paused\\\");\\n        require(stage == _stage, \\\"This action is not allowed in this status\\\");\\n        _;\\n    }\\n\\n    modifier validateMint(uint256 amount){           \\n        require(amount > 0, \\\"minimum mint amount is 1\\\");    \\n        require(totalSupply() < maxSupply, \\\"Sold Out\\\");  \\n        require(msg.sender == tx.origin, \\\"only mint origin wallet\\\"); \\n        _;\\n        \\n    }\\n\\n    \\n    function setMaxSupply(uint256 maxSupply_) \\n        onlyOwner\\n        atStage(MintStage.INITIATED)        \\n        public {\\n            maxSupply = maxSupply_;\\n    } \\n\\n    function setMaxMintPerWallet(uint256 maxMintPerWalletWhite_, uint256 maxMintPerWalletPublic_) \\n        onlyOwner\\n        atStage(MintStage.INITIATED)        \\n        public {            \\n            maxMintPerWalletWhite = maxMintPerWalletWhite_;\\n            maxMintPerWalletPublic = maxMintPerWalletPublic_;\\n    }\\n\\n    function setMintPrices(uint256 mintPriceWhite_, uint256 mintPricePublic_) \\n        onlyOwner\\n        atStage(MintStage.INITIATED)        \\n        public {\\n            mintPriceWhite = mintPriceWhite_;\\n            mintPricePublic = mintPricePublic_;            \\n    }\\n\\n    function setBaseUri(string memory uri_) \\n        onlyOwner\\n        atStage(MintStage.INITIATED)        \\n        public {\\n            uri = uri_;\\n            //nextStage();\\n    } \\n\\n\\n    function addAddressToWhitelist(address[] calldata _addresses) \\n        onlyOwner\\n        atStage(MintStage.INITIATED)        \\n        external   \\n    {\\n        require(_addresses.length > 0, \\\"No addresses\\\");\\n        for (uint256 i = 0; i < _addresses.length; i++) {\\n            whiteListedAddress[_addresses[i]].allowedMints = maxMintPerWalletWhite;\\n            whiteListedAddress[_addresses[i]].isWhiteListed = true;\\n            whitelistCount++;\\n            emit AddedToWhiteList(_addresses[i]);\\n        }\\n    }\\n\\n\\n    function removeAddressFromWhitelist(address _address) \\n        onlyOwner\\n        atStage(MintStage.INITIATED)        \\n        external {\\n        \\n        require(whiteListedAddress[_address].isWhiteListed, \\\"Address is not whitelisted\\\");        \\n        delete whiteListedAddress[_address];        \\n        emit RemovedFromWhiteList(_address);\\n    }\\n\\n\\n    function whiteMint(uint256 amount) \\n        atStage(MintStage.WHITEMINT)\\n        validateMint(amount)\\n        external \\n        payable { \\n            // require(block.timestamp - lastActivity > 1 minutes, \\\"WhiteListMint not active yet\\\");\\n            require(whiteListedAddress[msg.sender].isWhiteListed, \\\"address not whitelisted\\\");\\n            require(amount <= maxMintPerWalletWhite, \\\"exceed max mint per wallet\\\");            \\n            require(whiteListedAddress[msg.sender].allowedMints >= amount, \\\"not allowed mint more than amount left\\\");\\n            \\n            require(mintPriceWhite * amount <= msg.value, \\\"insuficient fonds\\\");                        \\n            // uint256 tokenId = _tokenIdCounter.current();\\n\\n            require((whiteListedAddress[msg.sender].allowedMints - amount) >= 0, \\\"no negative\\\");\\n            \\n            whiteListedAddress[msg.sender].allowedMints -= amount;\\n            for (uint256 i = 0; i < amount; i++) {\\n                _tokenIdCounter.increment();\\n                _safeMint(msg.sender, _tokenIdCounter.current());        \\n            }\\n            emit WhiteMintEvent(msg.sender, amount);\\n\\n    }\\n\\n     function publicMint(uint256 amount) \\n        atStage(MintStage.PUBLICMINT)\\n        validateMint(amount)        \\n        external \\n        payable{\\n            // require(block.timestamp - lastActivity > 1 minutes, \\\"PublicMint not active yet\\\");\\n            require(amount <= maxMintPerWalletPublic, \\\"exceed max mint per wallet\\\");  \\n            require((amount + totalSupply()) <= maxSupply, \\\"amount exceed remaining mint\\\");              \\n            require(mintPricePublic * amount <= msg.value, \\\"insuficient fonds\\\"); \\n            \\n            //uint256 tokenId = _tokenIdCounter.current();\\n                        \\n            for (uint256 i = 0; i < amount; i++) {\\n                _tokenIdCounter.increment();\\n                _safeMint(msg.sender, _tokenIdCounter.current());        \\n            }    \\n            \\n            //if(maxSupply === totalSupply()){\\n            //    nextStage();\\n            //}\\n            emit PublicMintEvent(msg.sender, amount);  \\n    }\\n\\n\\n    function revealCollection(string memory uri_) \\n        onlyOwner\\n        atStage(MintStage.REVEAL)        \\n        public {\\n            uri = uri_;                   \\n    }  \\n\\n\\n    function withdraw() \\n        onlyOwner\\n        atStage(MintStage.FINISHED)\\n        nonReentrant\\n        public \\n        payable \\n        {\\n            require(address(this).balance > 0, \\\"Balance is 0\\\");\\n            payable(owner()).transfer(address(this).balance);\\n    }\\n\\n\\n    function enableBurn()     \\n    onlyOwner \\n    atStage(MintStage.FINISHED) \\n    public {\\n        burnEnabled = true;\\n    }\\n\\n\\n    function setPause() \\n        onlyOwner\\n        public {\\n            isPaused = !isPaused;\\n            lastActivity = block.timestamp;\\n            emit SetPause(isPaused, block.timestamp);\\n    } \\n\\n    \\n    function nextStage() public onlyOwner {\\n        require(!isPaused, \\\"The contract is paused\\\");\\n        stage = MintStage(uint(stage) + 1);\\n        lastActivity = block.timestamp;\\n        emit StageChanged(stage, block.timestamp);\\n    }\\n\\n    \\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721 Metadata: URI query for nonexistent token\\\"\\n        );\\n        \\n        //return usePlaceholderUri ? uri : bytes(uri).length > 0 ? string(abi.encodePacked(uri, tokenId.toString())) : \\\"\\\";\\n        return string(abi.encodePacked(uri,  Strings.toString(tokenId),baseExtension));\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId)\\n        internal\\n        override(ERC721, ERC721Enumerable)\\n    {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721, ERC721Enumerable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    \\n    event StageChanged(MintStage indexed, uint256 time );\\n    event SetPause(bool isPaused, uint256 time );\\n    event AddedToWhiteList(address indexed whitelistAddress);\\n    event RemovedFromWhiteList(address indexed removedAddress);\\n    event WhiteMintEvent(address indexed sender, uint indexed amount);\\n    event PublicMintEvent(address indexed sender, uint indexed amount);\\n    event Withdraw(address indexed msgSender, address indexed token);\\n}\\n\",\"keccak256\":\"0x04bc048dd0ad702c2088bf7c3edb7e49eaec1d9d95275e4a58346b71f16d19d7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526040518060400160405280600581526020017f2e6a736f6e000000000000000000000000000000000000000000000000000000815250601690805190602001906200005192919062000231565b503480156200005f57600080fd5b5060405162006619380380620066198339818101604052810190620000859190620004b9565b868681600090805190602001906200009f92919062000231565b508060019080519060200190620000b892919062000231565b505050620000db620000cf6200016360201b60201c565b6200016b60201b60201c565b6001600b819055506000600d60016101000a81548160ff0219169083151502179055508460108190555083601281905550826011819055508160138190555080601481905550426018819055506000601760006101000a81548160ff02191690836004811115620001515762000150620005aa565b5b0217905550505050505050506200063e565b600033905090565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8280546200023f9062000608565b90600052602060002090601f016020900481019282620002635760008555620002af565b82601f106200027e57805160ff1916838001178555620002af565b82800160010185558215620002af579182015b82811115620002ae57825182559160200191906001019062000291565b5b509050620002be9190620002c2565b5090565b5b80821115620002dd576000816000905550600101620002c3565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200034a82620002ff565b810181811067ffffffffffffffff821117156200036c576200036b62000310565b5b80604052505050565b600062000381620002e1565b90506200038f82826200033f565b919050565b600067ffffffffffffffff821115620003b257620003b162000310565b5b620003bd82620002ff565b9050602081019050919050565b60005b83811015620003ea578082015181840152602081019050620003cd565b83811115620003fa576000848401525b50505050565b600062000417620004118462000394565b62000375565b905082815260208101848484011115620004365762000435620002fa565b5b62000443848285620003ca565b509392505050565b600082601f830112620004635762000462620002f5565b5b81516200047584826020860162000400565b91505092915050565b6000819050919050565b62000493816200047e565b81146200049f57600080fd5b50565b600081519050620004b38162000488565b92915050565b600080600080600080600060e0888a031215620004db57620004da620002eb565b5b600088015167ffffffffffffffff811115620004fc57620004fb620002f0565b5b6200050a8a828b016200044b565b975050602088015167ffffffffffffffff8111156200052e576200052d620002f0565b5b6200053c8a828b016200044b565b96505060406200054f8a828b01620004a2565b9550506060620005628a828b01620004a2565b9450506080620005758a828b01620004a2565b93505060a0620005888a828b01620004a2565b92505060c06200059b8a828b01620004a2565b91505092959891949750929550565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200062157607f821691505b60208210811415620006385762000637620005d9565b5b50919050565b615fcb806200064e6000396000f3fe6080604052600436106102725760003560e01c8063715018a61161014f578063c6682862116100c1578063e985e9c51161007a578063e985e9c514610904578063eac989f814610941578063ecdab3261461096c578063ee3743ab14610995578063f2624b5d146109ac578063f2fde38b146109d757610272565b8063c668286214610806578063c87b56dd14610831578063d3bcbb3c1461086e578063d431b1ac14610897578063d5abeb01146108ae578063e1fcd707146108d957610272565b8063a0bcfc7f11610113578063a0bcfc7f146106f7578063a22cb46514610720578063b187bd2614610749578063b88d4fde14610774578063c040e6b81461079d578063c166d13d146107c857610272565b8063715018a6146106365780637bd4f0711461064d5780638da5cb5b146106765780638f708bcf146106a157806395d89b41146106cc57610272565b80633b37d1d6116101e857806350179bae116101ac57806350179bae146105145780635dc96d161461053d5780635fd51b37146105685780636352211e146105935780636f8b44b0146105d057806370a08231146105f957610272565b80633b37d1d6146104715780633ccfd60b1461048857806342842e0e1461049257806347d6b593146104bb5780634f6ccce7146104d757610272565b80631c18a0621161023a5780631c18a0621461037057806323b872dd1461039b578063286dd3f5146103c45780632db11544146103ed5780632e7b26a7146104095780632f745c591461043457610272565b806301ffc9a71461027757806306fdde03146102b4578063081812fc146102df578063095ea7b31461031c57806318160ddd14610345575b600080fd5b34801561028357600080fd5b5061029e600480360381019061029991906142d0565b610a00565b6040516102ab9190614318565b60405180910390f35b3480156102c057600080fd5b506102c9610a12565b6040516102d691906143cc565b60405180910390f35b3480156102eb57600080fd5b5061030660048036038101906103019190614424565b610aa4565b6040516103139190614492565b60405180910390f35b34801561032857600080fd5b50610343600480360381019061033e91906144d9565b610b29565b005b34801561035157600080fd5b5061035a610c41565b6040516103679190614528565b60405180910390f35b34801561037c57600080fd5b50610385610c4e565b6040516103929190614528565b60405180910390f35b3480156103a757600080fd5b506103c260048036038101906103bd9190614543565b610c54565b005b3480156103d057600080fd5b506103eb60048036038101906103e69190614596565b610cb4565b005b61040760048036038101906104029190614424565b610f2b565b005b34801561041557600080fd5b5061041e611260565b60405161042b9190614528565b60405180910390f35b34801561044057600080fd5b5061045b600480360381019061045691906144d9565b611266565b6040516104689190614528565b60405180910390f35b34801561047d57600080fd5b5061048661130b565b005b61049061146c565b005b34801561049e57600080fd5b506104b960048036038101906104b49190614543565b611699565b005b6104d560048036038101906104d09190614424565b6116b9565b005b3480156104e357600080fd5b506104fe60048036038101906104f99190614424565b611b95565b60405161050b9190614528565b60405180910390f35b34801561052057600080fd5b5061053b600480360381019061053691906146f8565b611c06565b005b34801561054957600080fd5b50610552611d64565b60405161055f9190614318565b60405180910390f35b34801561057457600080fd5b5061057d611d77565b60405161058a9190614528565b60405180910390f35b34801561059f57600080fd5b506105ba60048036038101906105b59190614424565b611d7d565b6040516105c79190614492565b60405180910390f35b3480156105dc57600080fd5b506105f760048036038101906105f29190614424565b611e2f565b005b34801561060557600080fd5b50610620600480360381019061061b9190614596565b611f7d565b60405161062d9190614528565b60405180910390f35b34801561064257600080fd5b5061064b612035565b005b34801561065957600080fd5b50610674600480360381019061066f9190614741565b6120bd565b005b34801561068257600080fd5b5061068b612213565b6040516106989190614492565b60405180910390f35b3480156106ad57600080fd5b506106b661223d565b6040516106c39190614528565b60405180910390f35b3480156106d857600080fd5b506106e1612243565b6040516106ee91906143cc565b60405180910390f35b34801561070357600080fd5b5061071e600480360381019061071991906146f8565b6122d5565b005b34801561072c57600080fd5b50610747600480360381019061074291906147ad565b612433565b005b34801561075557600080fd5b5061075e612449565b60405161076b9190614318565b60405180910390f35b34801561078057600080fd5b5061079b6004803603810190610796919061488e565b61245c565b005b3480156107a957600080fd5b506107b26124be565b6040516107bf9190614988565b60405180910390f35b3480156107d457600080fd5b506107ef60048036038101906107ea9190614596565b6124d1565b6040516107fd9291906149a3565b60405180910390f35b34801561081257600080fd5b5061081b612502565b60405161082891906143cc565b60405180910390f35b34801561083d57600080fd5b5061085860048036038101906108539190614424565b612590565b60405161086591906143cc565b60405180910390f35b34801561087a57600080fd5b5061089560048036038101906108909190614a2c565b61260f565b005b3480156108a357600080fd5b506108ac612933565b005b3480156108ba57600080fd5b506108c3612a2a565b6040516108d09190614528565b60405180910390f35b3480156108e557600080fd5b506108ee612a30565b6040516108fb9190614528565b60405180910390f35b34801561091057600080fd5b5061092b60048036038101906109269190614a79565b612a36565b6040516109389190614318565b60405180910390f35b34801561094d57600080fd5b50610956612aca565b60405161096391906143cc565b60405180910390f35b34801561097857600080fd5b50610993600480360381019061098e9190614741565b612b58565b005b3480156109a157600080fd5b506109aa612cae565b005b3480156109b857600080fd5b506109c1612e45565b6040516109ce9190614528565b60405180910390f35b3480156109e357600080fd5b506109fe60048036038101906109f99190614596565b612e4b565b005b6000610a0b82612f43565b9050919050565b606060008054610a2190614ae8565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4d90614ae8565b8015610a9a5780601f10610a6f57610100808354040283529160200191610a9a565b820191906000526020600020905b815481529060010190602001808311610a7d57829003601f168201915b5050505050905090565b6000610aaf82612fbd565b610aee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae590614b8c565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610b3482611d7d565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610ba5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9c90614c1e565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610bc4613029565b73ffffffffffffffffffffffffffffffffffffffff161480610bf35750610bf281610bed613029565b612a36565b5b610c32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2990614cb0565b60405180910390fd5b610c3c8383613031565b505050565b6000600880549050905090565b60135481565b610c65610c5f613029565b826130ea565b610ca4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9b90614d42565b60405180910390fd5b610caf8383836131c8565b505050565b610cbc613029565b73ffffffffffffffffffffffffffffffffffffffff16610cda612213565b73ffffffffffffffffffffffffffffffffffffffff1614610d30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2790614dae565b60405180910390fd5b6000600d60009054906101000a900460ff1615610d82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7990614e1a565b60405180910390fd5b806004811115610d9557610d94614911565b5b601760009054906101000a900460ff166004811115610db757610db6614911565b5b14610df7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dee90614eac565b60405180910390fd5b600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16610e86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7d90614f18565b60405180910390fd5b600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006101000a81549060ff0219169055600182016000905550508173ffffffffffffffffffffffffffffffffffffffff167f9354cd337eebad48c93d70f7321b188732c3061fa5c48fe32b8e6f9480c52fcc60405160405180910390a25050565b6002600d60009054906101000a900460ff1615610f7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7490614e1a565b60405180910390fd5b806004811115610f9057610f8f614911565b5b601760009054906101000a900460ff166004811115610fb257610fb1614911565b5b14610ff2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe990614eac565b60405180910390fd5b8160008111611036576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102d90614f84565b60405180910390fd5b601054611041610c41565b10611081576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107890614ff0565b60405180910390fd5b3273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e69061505c565b60405180910390fd5b601254831115611134576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112b906150c8565b60405180910390fd5b60105461113f610c41565b8461114a9190615117565b111561118b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611182906151b9565b60405180910390fd5b348360135461119a91906151d9565b11156111db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d29061527f565b60405180910390fd5b60005b83811015611216576111f0600c61342f565b611203336111fe600c613445565b613453565b808061120e9061529f565b9150506111de565b50823373ffffffffffffffffffffffffffffffffffffffff167f03504c294a263bdb2a84fae303527be6ac0fa4c271f02075b2162fd41d95882560405160405180910390a3505050565b60115481565b600061127183611f7d565b82106112b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a99061535a565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b611313613029565b73ffffffffffffffffffffffffffffffffffffffff16611331612213565b73ffffffffffffffffffffffffffffffffffffffff1614611387576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137e90614dae565b60405180910390fd5b6004600d60009054906101000a900460ff16156113d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d090614e1a565b60405180910390fd5b8060048111156113ec576113eb614911565b5b601760009054906101000a900460ff16600481111561140e5761140d614911565b5b1461144e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144590614eac565b60405180910390fd5b6001600d60016101000a81548160ff02191690831515021790555050565b611474613029565b73ffffffffffffffffffffffffffffffffffffffff16611492612213565b73ffffffffffffffffffffffffffffffffffffffff16146114e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114df90614dae565b60405180910390fd5b6004600d60009054906101000a900460ff161561153a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153190614e1a565b60405180910390fd5b80600481111561154d5761154c614911565b5b601760009054906101000a900460ff16600481111561156f5761156e614911565b5b146115af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115a690614eac565b60405180910390fd5b6002600b5414156115f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ec906153c6565b60405180910390fd5b6002600b8190555060004711611640576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163790615432565b60405180910390fd5b611648612213565b73ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561168d573d6000803e3d6000fd5b506001600b8190555050565b6116b48383836040518060200160405280600081525061245c565b505050565b6001600d60009054906101000a900460ff161561170b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170290614e1a565b60405180910390fd5b80600481111561171e5761171d614911565b5b601760009054906101000a900460ff1660048111156117405761173f614911565b5b14611780576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177790614eac565b60405180910390fd5b81600081116117c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117bb90614f84565b60405180910390fd5b6010546117cf610c41565b1061180f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180690614ff0565b60405180910390fd5b3273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461187d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118749061505c565b60405180910390fd5b600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1661190c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119039061549e565b60405180910390fd5b601154831115611951576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611948906150c8565b60405180910390fd5b82600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015410156119d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119cd90615530565b60405180910390fd5b34836014546119e591906151d9565b1115611a26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1d9061527f565b60405180910390fd5b600083600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154611a769190615550565b1015611ab7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aae906155d0565b60405180910390fd5b82600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000828254611b099190615550565b9250508190555060005b83811015611b4b57611b25600c61342f565b611b3833611b33600c613445565b613453565b8080611b439061529f565b915050611b13565b50823373ffffffffffffffffffffffffffffffffffffffff167f5de1bf30ef597e495a31fa8fb6f676431eca3fed01c951b2559def80fa93fd0860405160405180910390a3505050565b6000611b9f610c41565b8210611be0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd790615662565b60405180910390fd5b60088281548110611bf457611bf3615682565b5b90600052602060002001549050919050565b611c0e613029565b73ffffffffffffffffffffffffffffffffffffffff16611c2c612213565b73ffffffffffffffffffffffffffffffffffffffff1614611c82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c7990614dae565b60405180910390fd5b6003600d60009054906101000a900460ff1615611cd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ccb90614e1a565b60405180910390fd5b806004811115611ce757611ce6614911565b5b601760009054906101000a900460ff166004811115611d0957611d08614911565b5b14611d49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4090614eac565b60405180910390fd5b8160159080519060200190611d5f9291906141c1565b505050565b600d60019054906101000a900460ff1681565b60185481565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611e26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1d90615723565b60405180910390fd5b80915050919050565b611e37613029565b73ffffffffffffffffffffffffffffffffffffffff16611e55612213565b73ffffffffffffffffffffffffffffffffffffffff1614611eab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ea290614dae565b60405180910390fd5b6000600d60009054906101000a900460ff1615611efd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ef490614e1a565b60405180910390fd5b806004811115611f1057611f0f614911565b5b601760009054906101000a900460ff166004811115611f3257611f31614911565b5b14611f72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f6990614eac565b60405180910390fd5b816010819055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611fee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe5906157b5565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61203d613029565b73ffffffffffffffffffffffffffffffffffffffff1661205b612213565b73ffffffffffffffffffffffffffffffffffffffff16146120b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120a890614dae565b60405180910390fd5b6120bb6000613471565b565b6120c5613029565b73ffffffffffffffffffffffffffffffffffffffff166120e3612213565b73ffffffffffffffffffffffffffffffffffffffff1614612139576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161213090614dae565b60405180910390fd5b6000600d60009054906101000a900460ff161561218b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161218290614e1a565b60405180910390fd5b80600481111561219e5761219d614911565b5b601760009054906101000a900460ff1660048111156121c0576121bf614911565b5b14612200576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121f790614eac565b60405180910390fd5b8260118190555081601281905550505050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60145481565b60606001805461225290614ae8565b80601f016020809104026020016040519081016040528092919081815260200182805461227e90614ae8565b80156122cb5780601f106122a0576101008083540402835291602001916122cb565b820191906000526020600020905b8154815290600101906020018083116122ae57829003601f168201915b5050505050905090565b6122dd613029565b73ffffffffffffffffffffffffffffffffffffffff166122fb612213565b73ffffffffffffffffffffffffffffffffffffffff1614612351576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161234890614dae565b60405180910390fd5b6000600d60009054906101000a900460ff16156123a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161239a90614e1a565b60405180910390fd5b8060048111156123b6576123b5614911565b5b601760009054906101000a900460ff1660048111156123d8576123d7614911565b5b14612418576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161240f90614eac565b60405180910390fd5b816015908051906020019061242e9291906141c1565b505050565b61244561243e613029565b8383613537565b5050565b600d60009054906101000a900460ff1681565b61246d612467613029565b836130ea565b6124ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a390614d42565b60405180910390fd5b6124b8848484846136a4565b50505050565b601760009054906101000a900460ff1681565b600f6020528060005260406000206000915090508060000160009054906101000a900460ff16908060010154905082565b6016805461250f90614ae8565b80601f016020809104026020016040519081016040528092919081815260200182805461253b90614ae8565b80156125885780601f1061255d57610100808354040283529160200191612588565b820191906000526020600020905b81548152906001019060200180831161256b57829003601f168201915b505050505081565b606061259b82612fbd565b6125da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125d190615847565b60405180910390fd5b60156125e583613700565b60166040516020016125f993929190615937565b6040516020818303038152906040529050919050565b612617613029565b73ffffffffffffffffffffffffffffffffffffffff16612635612213565b73ffffffffffffffffffffffffffffffffffffffff161461268b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161268290614dae565b60405180910390fd5b6000600d60009054906101000a900460ff16156126dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126d490614e1a565b60405180910390fd5b8060048111156126f0576126ef614911565b5b601760009054906101000a900460ff16600481111561271257612711614911565b5b14612752576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161274990614eac565b60405180910390fd5b60008383905011612798576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161278f906159b4565b60405180910390fd5b60005b8383905081101561292d57601154600f60008686858181106127c0576127bf615682565b5b90506020020160208101906127d59190614596565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506001600f600086868581811061282f5761282e615682565b5b90506020020160208101906128449190614596565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff021916908315150217905550600e60008154809291906128ab9061529f565b91905055508383828181106128c3576128c2615682565b5b90506020020160208101906128d89190614596565b73ffffffffffffffffffffffffffffffffffffffff167f8a3be376fdc726be3f3cee8e59ba5698a268a9b59f69cdabcf06d2ec2c90658f60405160405180910390a280806129259061529f565b91505061279b565b50505050565b61293b613029565b73ffffffffffffffffffffffffffffffffffffffff16612959612213565b73ffffffffffffffffffffffffffffffffffffffff16146129af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129a690614dae565b60405180910390fd5b600d60009054906101000a900460ff1615600d60006101000a81548160ff021916908315150217905550426018819055507fd2a642be310b5beefe5c50f8cee7f67d7210962579bb3c8154f0cfc36d96b220600d60009054906101000a900460ff1642604051612a209291906149a3565b60405180910390a1565b60105481565b60125481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60158054612ad790614ae8565b80601f0160208091040260200160405190810160405280929190818152602001828054612b0390614ae8565b8015612b505780601f10612b2557610100808354040283529160200191612b50565b820191906000526020600020905b815481529060010190602001808311612b3357829003601f168201915b505050505081565b612b60613029565b73ffffffffffffffffffffffffffffffffffffffff16612b7e612213565b73ffffffffffffffffffffffffffffffffffffffff1614612bd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bcb90614dae565b60405180910390fd5b6000600d60009054906101000a900460ff1615612c26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c1d90614e1a565b60405180910390fd5b806004811115612c3957612c38614911565b5b601760009054906101000a900460ff166004811115612c5b57612c5a614911565b5b14612c9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c9290614eac565b60405180910390fd5b8260148190555081601381905550505050565b612cb6613029565b73ffffffffffffffffffffffffffffffffffffffff16612cd4612213565b73ffffffffffffffffffffffffffffffffffffffff1614612d2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d2190614dae565b60405180910390fd5b600d60009054906101000a900460ff1615612d7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d7190614e1a565b60405180910390fd5b6001601760009054906101000a900460ff166004811115612d9e57612d9d614911565b5b612da89190615117565b6004811115612dba57612db9614911565b5b601760006101000a81548160ff02191690836004811115612dde57612ddd614911565b5b021790555042601881905550601760009054906101000a900460ff166004811115612e0c57612e0b614911565b5b7fc71bede083c0a5c534596a0a4b0d99c36da65f2219bd1601e500298b4e277c8c42604051612e3b9190614528565b60405180910390a2565b600e5481565b612e53613029565b73ffffffffffffffffffffffffffffffffffffffff16612e71612213565b73ffffffffffffffffffffffffffffffffffffffff1614612ec7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ebe90614dae565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612f37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f2e90615a46565b60405180910390fd5b612f4081613471565b50565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612fb65750612fb582613861565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166130a483611d7d565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006130f582612fbd565b613134576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161312b90615ad8565b60405180910390fd5b600061313f83611d7d565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061318157506131808185612a36565b5b806131bf57508373ffffffffffffffffffffffffffffffffffffffff166131a784610aa4565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166131e882611d7d565b73ffffffffffffffffffffffffffffffffffffffff161461323e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161323590615b6a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156132ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132a590615bfc565b60405180910390fd5b6132b9838383613943565b6132c4600082613031565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546133149190615550565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461336b9190615117565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461342a838383613953565b505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b61346d828260405180602001604052806000815250613958565b5050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156135a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161359d90615c68565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516136979190614318565b60405180910390a3505050565b6136af8484846131c8565b6136bb848484846139b3565b6136fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136f190615cfa565b60405180910390fd5b50505050565b60606000821415613748576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061385c565b600082905060005b6000821461377a5780806137639061529f565b915050600a826137739190615d49565b9150613750565b60008167ffffffffffffffff811115613796576137956145cd565b5b6040519080825280601f01601f1916602001820160405280156137c85781602001600182028036833780820191505090505b5090505b60008514613855576001826137e19190615550565b9150600a856137f09190615d7a565b60306137fc9190615117565b60f81b81838151811061381257613811615682565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561384e9190615d49565b94506137cc565b8093505050505b919050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061392c57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061393c575061393b82613b3b565b5b9050919050565b61394e838383613ba5565b505050565b505050565b6139628383613cb9565b61396f60008484846139b3565b6139ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139a590615cfa565b60405180910390fd5b505050565b60006139d48473ffffffffffffffffffffffffffffffffffffffff16613e93565b15613b2e578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026139fd613029565b8786866040518563ffffffff1660e01b8152600401613a1f9493929190615e00565b6020604051808303816000875af1925050508015613a5b57506040513d601f19601f82011682018060405250810190613a589190615e61565b60015b613ade573d8060008114613a8b576040519150601f19603f3d011682016040523d82523d6000602084013e613a90565b606091505b50600081511415613ad6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613acd90615cfa565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050613b33565b600190505b949350505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b613bb0838383613eb6565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415613bf357613bee81613ebb565b613c32565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614613c3157613c308382613f04565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613c7557613c7081614071565b613cb4565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614613cb357613cb28282614142565b5b5b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613d29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d2090615eda565b60405180910390fd5b613d3281612fbd565b15613d72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d6990615f46565b60405180910390fd5b613d7e60008383613943565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613dce9190615117565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4613e8f60008383613953565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b60006001613f1184611f7d565b613f1b9190615550565b9050600060076000848152602001908152602001600020549050818114614000576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b600060016008805490506140859190615550565b90506000600960008481526020019081526020016000205490506000600883815481106140b5576140b4615682565b5b9060005260206000200154905080600883815481106140d7576140d6615682565b5b90600052602060002001819055508160096000838152602001908152602001600020819055506009600085815260200190815260200160002060009055600880548061412657614125615f66565b5b6001900381819060005260206000200160009055905550505050565b600061414d83611f7d565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b8280546141cd90614ae8565b90600052602060002090601f0160209004810192826141ef5760008555614236565b82601f1061420857805160ff1916838001178555614236565b82800160010185558215614236579182015b8281111561423557825182559160200191906001019061421a565b5b5090506142439190614247565b5090565b5b80821115614260576000816000905550600101614248565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6142ad81614278565b81146142b857600080fd5b50565b6000813590506142ca816142a4565b92915050565b6000602082840312156142e6576142e561426e565b5b60006142f4848285016142bb565b91505092915050565b60008115159050919050565b614312816142fd565b82525050565b600060208201905061432d6000830184614309565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561436d578082015181840152602081019050614352565b8381111561437c576000848401525b50505050565b6000601f19601f8301169050919050565b600061439e82614333565b6143a8818561433e565b93506143b881856020860161434f565b6143c181614382565b840191505092915050565b600060208201905081810360008301526143e68184614393565b905092915050565b6000819050919050565b614401816143ee565b811461440c57600080fd5b50565b60008135905061441e816143f8565b92915050565b60006020828403121561443a5761443961426e565b5b60006144488482850161440f565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061447c82614451565b9050919050565b61448c81614471565b82525050565b60006020820190506144a76000830184614483565b92915050565b6144b681614471565b81146144c157600080fd5b50565b6000813590506144d3816144ad565b92915050565b600080604083850312156144f0576144ef61426e565b5b60006144fe858286016144c4565b925050602061450f8582860161440f565b9150509250929050565b614522816143ee565b82525050565b600060208201905061453d6000830184614519565b92915050565b60008060006060848603121561455c5761455b61426e565b5b600061456a868287016144c4565b935050602061457b868287016144c4565b925050604061458c8682870161440f565b9150509250925092565b6000602082840312156145ac576145ab61426e565b5b60006145ba848285016144c4565b91505092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61460582614382565b810181811067ffffffffffffffff82111715614624576146236145cd565b5b80604052505050565b6000614637614264565b905061464382826145fc565b919050565b600067ffffffffffffffff821115614663576146626145cd565b5b61466c82614382565b9050602081019050919050565b82818337600083830152505050565b600061469b61469684614648565b61462d565b9050828152602081018484840111156146b7576146b66145c8565b5b6146c2848285614679565b509392505050565b600082601f8301126146df576146de6145c3565b5b81356146ef848260208601614688565b91505092915050565b60006020828403121561470e5761470d61426e565b5b600082013567ffffffffffffffff81111561472c5761472b614273565b5b614738848285016146ca565b91505092915050565b600080604083850312156147585761475761426e565b5b60006147668582860161440f565b92505060206147778582860161440f565b9150509250929050565b61478a816142fd565b811461479557600080fd5b50565b6000813590506147a781614781565b92915050565b600080604083850312156147c4576147c361426e565b5b60006147d2858286016144c4565b92505060206147e385828601614798565b9150509250929050565b600067ffffffffffffffff821115614808576148076145cd565b5b61481182614382565b9050602081019050919050565b600061483161482c846147ed565b61462d565b90508281526020810184848401111561484d5761484c6145c8565b5b614858848285614679565b509392505050565b600082601f830112614875576148746145c3565b5b813561488584826020860161481e565b91505092915050565b600080600080608085870312156148a8576148a761426e565b5b60006148b6878288016144c4565b94505060206148c7878288016144c4565b93505060406148d88782880161440f565b925050606085013567ffffffffffffffff8111156148f9576148f8614273565b5b61490587828801614860565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6005811061495157614950614911565b5b50565b600081905061496282614940565b919050565b600061497282614954565b9050919050565b61498281614967565b82525050565b600060208201905061499d6000830184614979565b92915050565b60006040820190506149b86000830185614309565b6149c56020830184614519565b9392505050565b600080fd5b600080fd5b60008083601f8401126149ec576149eb6145c3565b5b8235905067ffffffffffffffff811115614a0957614a086149cc565b5b602083019150836020820283011115614a2557614a246149d1565b5b9250929050565b60008060208385031215614a4357614a4261426e565b5b600083013567ffffffffffffffff811115614a6157614a60614273565b5b614a6d858286016149d6565b92509250509250929050565b60008060408385031215614a9057614a8f61426e565b5b6000614a9e858286016144c4565b9250506020614aaf858286016144c4565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680614b0057607f821691505b60208210811415614b1457614b13614ab9565b5b50919050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000614b76602c8361433e565b9150614b8182614b1a565b604082019050919050565b60006020820190508181036000830152614ba581614b69565b9050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000614c0860218361433e565b9150614c1382614bac565b604082019050919050565b60006020820190508181036000830152614c3781614bfb565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b6000614c9a60388361433e565b9150614ca582614c3e565b604082019050919050565b60006020820190508181036000830152614cc981614c8d565b9050919050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b6000614d2c60318361433e565b9150614d3782614cd0565b604082019050919050565b60006020820190508181036000830152614d5b81614d1f565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614d9860208361433e565b9150614da382614d62565b602082019050919050565b60006020820190508181036000830152614dc781614d8b565b9050919050565b7f54686520636f6e74726163742069732070617573656400000000000000000000600082015250565b6000614e0460168361433e565b9150614e0f82614dce565b602082019050919050565b60006020820190508181036000830152614e3381614df7565b9050919050565b7f5468697320616374696f6e206973206e6f7420616c6c6f77656420696e20746860008201527f6973207374617475730000000000000000000000000000000000000000000000602082015250565b6000614e9660298361433e565b9150614ea182614e3a565b604082019050919050565b60006020820190508181036000830152614ec581614e89565b9050919050565b7f41646472657373206973206e6f742077686974656c6973746564000000000000600082015250565b6000614f02601a8361433e565b9150614f0d82614ecc565b602082019050919050565b60006020820190508181036000830152614f3181614ef5565b9050919050565b7f6d696e696d756d206d696e7420616d6f756e7420697320310000000000000000600082015250565b6000614f6e60188361433e565b9150614f7982614f38565b602082019050919050565b60006020820190508181036000830152614f9d81614f61565b9050919050565b7f536f6c64204f7574000000000000000000000000000000000000000000000000600082015250565b6000614fda60088361433e565b9150614fe582614fa4565b602082019050919050565b6000602082019050818103600083015261500981614fcd565b9050919050565b7f6f6e6c79206d696e74206f726967696e2077616c6c6574000000000000000000600082015250565b600061504660178361433e565b915061505182615010565b602082019050919050565b6000602082019050818103600083015261507581615039565b9050919050565b7f657863656564206d6178206d696e74207065722077616c6c6574000000000000600082015250565b60006150b2601a8361433e565b91506150bd8261507c565b602082019050919050565b600060208201905081810360008301526150e1816150a5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000615122826143ee565b915061512d836143ee565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115615162576151616150e8565b5b828201905092915050565b7f616d6f756e74206578636565642072656d61696e696e67206d696e7400000000600082015250565b60006151a3601c8361433e565b91506151ae8261516d565b602082019050919050565b600060208201905081810360008301526151d281615196565b9050919050565b60006151e4826143ee565b91506151ef836143ee565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615615228576152276150e8565b5b828202905092915050565b7f696e737566696369656e7420666f6e6473000000000000000000000000000000600082015250565b600061526960118361433e565b915061527482615233565b602082019050919050565b600060208201905081810360008301526152988161525c565b9050919050565b60006152aa826143ee565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156152dd576152dc6150e8565b5b600182019050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b6000615344602b8361433e565b915061534f826152e8565b604082019050919050565b6000602082019050818103600083015261537381615337565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006153b0601f8361433e565b91506153bb8261537a565b602082019050919050565b600060208201905081810360008301526153df816153a3565b9050919050565b7f42616c616e636520697320300000000000000000000000000000000000000000600082015250565b600061541c600c8361433e565b9150615427826153e6565b602082019050919050565b6000602082019050818103600083015261544b8161540f565b9050919050565b7f61646472657373206e6f742077686974656c6973746564000000000000000000600082015250565b600061548860178361433e565b915061549382615452565b602082019050919050565b600060208201905081810360008301526154b78161547b565b9050919050565b7f6e6f7420616c6c6f776564206d696e74206d6f7265207468616e20616d6f756e60008201527f74206c6566740000000000000000000000000000000000000000000000000000602082015250565b600061551a60268361433e565b9150615525826154be565b604082019050919050565b600060208201905081810360008301526155498161550d565b9050919050565b600061555b826143ee565b9150615566836143ee565b925082821015615579576155786150e8565b5b828203905092915050565b7f6e6f206e65676174697665000000000000000000000000000000000000000000600082015250565b60006155ba600b8361433e565b91506155c582615584565b602082019050919050565b600060208201905081810360008301526155e9816155ad565b9050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b600061564c602c8361433e565b9150615657826155f0565b604082019050919050565b6000602082019050818103600083015261567b8161563f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b600061570d60298361433e565b9150615718826156b1565b604082019050919050565b6000602082019050818103600083015261573c81615700565b9050919050565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b600061579f602a8361433e565b91506157aa82615743565b604082019050919050565b600060208201905081810360008301526157ce81615792565b9050919050565b7f455243373231204d657461646174613a2055524920717565727920666f72206e60008201527f6f6e6578697374656e7420746f6b656e00000000000000000000000000000000602082015250565b600061583160308361433e565b915061583c826157d5565b604082019050919050565b6000602082019050818103600083015261586081615824565b9050919050565b600081905092915050565b60008190508160005260206000209050919050565b6000815461589481614ae8565b61589e8186615867565b945060018216600081146158b957600181146158ca576158fd565b60ff198316865281860193506158fd565b6158d385615872565b60005b838110156158f5578154818901526001820191506020810190506158d6565b838801955050505b50505092915050565b600061591182614333565b61591b8185615867565b935061592b81856020860161434f565b80840191505092915050565b60006159438286615887565b915061594f8285615906565b915061595b8284615887565b9150819050949350505050565b7f4e6f206164647265737365730000000000000000000000000000000000000000600082015250565b600061599e600c8361433e565b91506159a982615968565b602082019050919050565b600060208201905081810360008301526159cd81615991565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000615a3060268361433e565b9150615a3b826159d4565b604082019050919050565b60006020820190508181036000830152615a5f81615a23565b9050919050565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000615ac2602c8361433e565b9150615acd82615a66565b604082019050919050565b60006020820190508181036000830152615af181615ab5565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000615b5460258361433e565b9150615b5f82615af8565b604082019050919050565b60006020820190508181036000830152615b8381615b47565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000615be660248361433e565b9150615bf182615b8a565b604082019050919050565b60006020820190508181036000830152615c1581615bd9565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000615c5260198361433e565b9150615c5d82615c1c565b602082019050919050565b60006020820190508181036000830152615c8181615c45565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000615ce460328361433e565b9150615cef82615c88565b604082019050919050565b60006020820190508181036000830152615d1381615cd7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000615d54826143ee565b9150615d5f836143ee565b925082615d6f57615d6e615d1a565b5b828204905092915050565b6000615d85826143ee565b9150615d90836143ee565b925082615da057615d9f615d1a565b5b828206905092915050565b600081519050919050565b600082825260208201905092915050565b6000615dd282615dab565b615ddc8185615db6565b9350615dec81856020860161434f565b615df581614382565b840191505092915050565b6000608082019050615e156000830187614483565b615e226020830186614483565b615e2f6040830185614519565b8181036060830152615e418184615dc7565b905095945050505050565b600081519050615e5b816142a4565b92915050565b600060208284031215615e7757615e7661426e565b5b6000615e8584828501615e4c565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000615ec460208361433e565b9150615ecf82615e8e565b602082019050919050565b60006020820190508181036000830152615ef381615eb7565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000615f30601c8361433e565b9150615f3b82615efa565b602082019050919050565b60006020820190508181036000830152615f5f81615f23565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220d08bae31498b870e4ca325209db3cb261701709f43863d510924704e39c61f7e64736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106102725760003560e01c8063715018a61161014f578063c6682862116100c1578063e985e9c51161007a578063e985e9c514610904578063eac989f814610941578063ecdab3261461096c578063ee3743ab14610995578063f2624b5d146109ac578063f2fde38b146109d757610272565b8063c668286214610806578063c87b56dd14610831578063d3bcbb3c1461086e578063d431b1ac14610897578063d5abeb01146108ae578063e1fcd707146108d957610272565b8063a0bcfc7f11610113578063a0bcfc7f146106f7578063a22cb46514610720578063b187bd2614610749578063b88d4fde14610774578063c040e6b81461079d578063c166d13d146107c857610272565b8063715018a6146106365780637bd4f0711461064d5780638da5cb5b146106765780638f708bcf146106a157806395d89b41146106cc57610272565b80633b37d1d6116101e857806350179bae116101ac57806350179bae146105145780635dc96d161461053d5780635fd51b37146105685780636352211e146105935780636f8b44b0146105d057806370a08231146105f957610272565b80633b37d1d6146104715780633ccfd60b1461048857806342842e0e1461049257806347d6b593146104bb5780634f6ccce7146104d757610272565b80631c18a0621161023a5780631c18a0621461037057806323b872dd1461039b578063286dd3f5146103c45780632db11544146103ed5780632e7b26a7146104095780632f745c591461043457610272565b806301ffc9a71461027757806306fdde03146102b4578063081812fc146102df578063095ea7b31461031c57806318160ddd14610345575b600080fd5b34801561028357600080fd5b5061029e600480360381019061029991906142d0565b610a00565b6040516102ab9190614318565b60405180910390f35b3480156102c057600080fd5b506102c9610a12565b6040516102d691906143cc565b60405180910390f35b3480156102eb57600080fd5b5061030660048036038101906103019190614424565b610aa4565b6040516103139190614492565b60405180910390f35b34801561032857600080fd5b50610343600480360381019061033e91906144d9565b610b29565b005b34801561035157600080fd5b5061035a610c41565b6040516103679190614528565b60405180910390f35b34801561037c57600080fd5b50610385610c4e565b6040516103929190614528565b60405180910390f35b3480156103a757600080fd5b506103c260048036038101906103bd9190614543565b610c54565b005b3480156103d057600080fd5b506103eb60048036038101906103e69190614596565b610cb4565b005b61040760048036038101906104029190614424565b610f2b565b005b34801561041557600080fd5b5061041e611260565b60405161042b9190614528565b60405180910390f35b34801561044057600080fd5b5061045b600480360381019061045691906144d9565b611266565b6040516104689190614528565b60405180910390f35b34801561047d57600080fd5b5061048661130b565b005b61049061146c565b005b34801561049e57600080fd5b506104b960048036038101906104b49190614543565b611699565b005b6104d560048036038101906104d09190614424565b6116b9565b005b3480156104e357600080fd5b506104fe60048036038101906104f99190614424565b611b95565b60405161050b9190614528565b60405180910390f35b34801561052057600080fd5b5061053b600480360381019061053691906146f8565b611c06565b005b34801561054957600080fd5b50610552611d64565b60405161055f9190614318565b60405180910390f35b34801561057457600080fd5b5061057d611d77565b60405161058a9190614528565b60405180910390f35b34801561059f57600080fd5b506105ba60048036038101906105b59190614424565b611d7d565b6040516105c79190614492565b60405180910390f35b3480156105dc57600080fd5b506105f760048036038101906105f29190614424565b611e2f565b005b34801561060557600080fd5b50610620600480360381019061061b9190614596565b611f7d565b60405161062d9190614528565b60405180910390f35b34801561064257600080fd5b5061064b612035565b005b34801561065957600080fd5b50610674600480360381019061066f9190614741565b6120bd565b005b34801561068257600080fd5b5061068b612213565b6040516106989190614492565b60405180910390f35b3480156106ad57600080fd5b506106b661223d565b6040516106c39190614528565b60405180910390f35b3480156106d857600080fd5b506106e1612243565b6040516106ee91906143cc565b60405180910390f35b34801561070357600080fd5b5061071e600480360381019061071991906146f8565b6122d5565b005b34801561072c57600080fd5b50610747600480360381019061074291906147ad565b612433565b005b34801561075557600080fd5b5061075e612449565b60405161076b9190614318565b60405180910390f35b34801561078057600080fd5b5061079b6004803603810190610796919061488e565b61245c565b005b3480156107a957600080fd5b506107b26124be565b6040516107bf9190614988565b60405180910390f35b3480156107d457600080fd5b506107ef60048036038101906107ea9190614596565b6124d1565b6040516107fd9291906149a3565b60405180910390f35b34801561081257600080fd5b5061081b612502565b60405161082891906143cc565b60405180910390f35b34801561083d57600080fd5b5061085860048036038101906108539190614424565b612590565b60405161086591906143cc565b60405180910390f35b34801561087a57600080fd5b5061089560048036038101906108909190614a2c565b61260f565b005b3480156108a357600080fd5b506108ac612933565b005b3480156108ba57600080fd5b506108c3612a2a565b6040516108d09190614528565b60405180910390f35b3480156108e557600080fd5b506108ee612a30565b6040516108fb9190614528565b60405180910390f35b34801561091057600080fd5b5061092b60048036038101906109269190614a79565b612a36565b6040516109389190614318565b60405180910390f35b34801561094d57600080fd5b50610956612aca565b60405161096391906143cc565b60405180910390f35b34801561097857600080fd5b50610993600480360381019061098e9190614741565b612b58565b005b3480156109a157600080fd5b506109aa612cae565b005b3480156109b857600080fd5b506109c1612e45565b6040516109ce9190614528565b60405180910390f35b3480156109e357600080fd5b506109fe60048036038101906109f99190614596565b612e4b565b005b6000610a0b82612f43565b9050919050565b606060008054610a2190614ae8565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4d90614ae8565b8015610a9a5780601f10610a6f57610100808354040283529160200191610a9a565b820191906000526020600020905b815481529060010190602001808311610a7d57829003601f168201915b5050505050905090565b6000610aaf82612fbd565b610aee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae590614b8c565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610b3482611d7d565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610ba5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9c90614c1e565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610bc4613029565b73ffffffffffffffffffffffffffffffffffffffff161480610bf35750610bf281610bed613029565b612a36565b5b610c32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2990614cb0565b60405180910390fd5b610c3c8383613031565b505050565b6000600880549050905090565b60135481565b610c65610c5f613029565b826130ea565b610ca4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9b90614d42565b60405180910390fd5b610caf8383836131c8565b505050565b610cbc613029565b73ffffffffffffffffffffffffffffffffffffffff16610cda612213565b73ffffffffffffffffffffffffffffffffffffffff1614610d30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2790614dae565b60405180910390fd5b6000600d60009054906101000a900460ff1615610d82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7990614e1a565b60405180910390fd5b806004811115610d9557610d94614911565b5b601760009054906101000a900460ff166004811115610db757610db6614911565b5b14610df7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dee90614eac565b60405180910390fd5b600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16610e86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7d90614f18565b60405180910390fd5b600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006101000a81549060ff0219169055600182016000905550508173ffffffffffffffffffffffffffffffffffffffff167f9354cd337eebad48c93d70f7321b188732c3061fa5c48fe32b8e6f9480c52fcc60405160405180910390a25050565b6002600d60009054906101000a900460ff1615610f7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7490614e1a565b60405180910390fd5b806004811115610f9057610f8f614911565b5b601760009054906101000a900460ff166004811115610fb257610fb1614911565b5b14610ff2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe990614eac565b60405180910390fd5b8160008111611036576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102d90614f84565b60405180910390fd5b601054611041610c41565b10611081576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107890614ff0565b60405180910390fd5b3273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e69061505c565b60405180910390fd5b601254831115611134576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112b906150c8565b60405180910390fd5b60105461113f610c41565b8461114a9190615117565b111561118b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611182906151b9565b60405180910390fd5b348360135461119a91906151d9565b11156111db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d29061527f565b60405180910390fd5b60005b83811015611216576111f0600c61342f565b611203336111fe600c613445565b613453565b808061120e9061529f565b9150506111de565b50823373ffffffffffffffffffffffffffffffffffffffff167f03504c294a263bdb2a84fae303527be6ac0fa4c271f02075b2162fd41d95882560405160405180910390a3505050565b60115481565b600061127183611f7d565b82106112b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a99061535a565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b611313613029565b73ffffffffffffffffffffffffffffffffffffffff16611331612213565b73ffffffffffffffffffffffffffffffffffffffff1614611387576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137e90614dae565b60405180910390fd5b6004600d60009054906101000a900460ff16156113d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d090614e1a565b60405180910390fd5b8060048111156113ec576113eb614911565b5b601760009054906101000a900460ff16600481111561140e5761140d614911565b5b1461144e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144590614eac565b60405180910390fd5b6001600d60016101000a81548160ff02191690831515021790555050565b611474613029565b73ffffffffffffffffffffffffffffffffffffffff16611492612213565b73ffffffffffffffffffffffffffffffffffffffff16146114e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114df90614dae565b60405180910390fd5b6004600d60009054906101000a900460ff161561153a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153190614e1a565b60405180910390fd5b80600481111561154d5761154c614911565b5b601760009054906101000a900460ff16600481111561156f5761156e614911565b5b146115af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115a690614eac565b60405180910390fd5b6002600b5414156115f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ec906153c6565b60405180910390fd5b6002600b8190555060004711611640576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163790615432565b60405180910390fd5b611648612213565b73ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561168d573d6000803e3d6000fd5b506001600b8190555050565b6116b48383836040518060200160405280600081525061245c565b505050565b6001600d60009054906101000a900460ff161561170b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170290614e1a565b60405180910390fd5b80600481111561171e5761171d614911565b5b601760009054906101000a900460ff1660048111156117405761173f614911565b5b14611780576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177790614eac565b60405180910390fd5b81600081116117c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117bb90614f84565b60405180910390fd5b6010546117cf610c41565b1061180f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180690614ff0565b60405180910390fd5b3273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461187d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118749061505c565b60405180910390fd5b600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1661190c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119039061549e565b60405180910390fd5b601154831115611951576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611948906150c8565b60405180910390fd5b82600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015410156119d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119cd90615530565b60405180910390fd5b34836014546119e591906151d9565b1115611a26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1d9061527f565b60405180910390fd5b600083600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154611a769190615550565b1015611ab7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aae906155d0565b60405180910390fd5b82600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000828254611b099190615550565b9250508190555060005b83811015611b4b57611b25600c61342f565b611b3833611b33600c613445565b613453565b8080611b439061529f565b915050611b13565b50823373ffffffffffffffffffffffffffffffffffffffff167f5de1bf30ef597e495a31fa8fb6f676431eca3fed01c951b2559def80fa93fd0860405160405180910390a3505050565b6000611b9f610c41565b8210611be0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd790615662565b60405180910390fd5b60088281548110611bf457611bf3615682565b5b90600052602060002001549050919050565b611c0e613029565b73ffffffffffffffffffffffffffffffffffffffff16611c2c612213565b73ffffffffffffffffffffffffffffffffffffffff1614611c82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c7990614dae565b60405180910390fd5b6003600d60009054906101000a900460ff1615611cd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ccb90614e1a565b60405180910390fd5b806004811115611ce757611ce6614911565b5b601760009054906101000a900460ff166004811115611d0957611d08614911565b5b14611d49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4090614eac565b60405180910390fd5b8160159080519060200190611d5f9291906141c1565b505050565b600d60019054906101000a900460ff1681565b60185481565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611e26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1d90615723565b60405180910390fd5b80915050919050565b611e37613029565b73ffffffffffffffffffffffffffffffffffffffff16611e55612213565b73ffffffffffffffffffffffffffffffffffffffff1614611eab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ea290614dae565b60405180910390fd5b6000600d60009054906101000a900460ff1615611efd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ef490614e1a565b60405180910390fd5b806004811115611f1057611f0f614911565b5b601760009054906101000a900460ff166004811115611f3257611f31614911565b5b14611f72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f6990614eac565b60405180910390fd5b816010819055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611fee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe5906157b5565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61203d613029565b73ffffffffffffffffffffffffffffffffffffffff1661205b612213565b73ffffffffffffffffffffffffffffffffffffffff16146120b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120a890614dae565b60405180910390fd5b6120bb6000613471565b565b6120c5613029565b73ffffffffffffffffffffffffffffffffffffffff166120e3612213565b73ffffffffffffffffffffffffffffffffffffffff1614612139576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161213090614dae565b60405180910390fd5b6000600d60009054906101000a900460ff161561218b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161218290614e1a565b60405180910390fd5b80600481111561219e5761219d614911565b5b601760009054906101000a900460ff1660048111156121c0576121bf614911565b5b14612200576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121f790614eac565b60405180910390fd5b8260118190555081601281905550505050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60145481565b60606001805461225290614ae8565b80601f016020809104026020016040519081016040528092919081815260200182805461227e90614ae8565b80156122cb5780601f106122a0576101008083540402835291602001916122cb565b820191906000526020600020905b8154815290600101906020018083116122ae57829003601f168201915b5050505050905090565b6122dd613029565b73ffffffffffffffffffffffffffffffffffffffff166122fb612213565b73ffffffffffffffffffffffffffffffffffffffff1614612351576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161234890614dae565b60405180910390fd5b6000600d60009054906101000a900460ff16156123a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161239a90614e1a565b60405180910390fd5b8060048111156123b6576123b5614911565b5b601760009054906101000a900460ff1660048111156123d8576123d7614911565b5b14612418576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161240f90614eac565b60405180910390fd5b816015908051906020019061242e9291906141c1565b505050565b61244561243e613029565b8383613537565b5050565b600d60009054906101000a900460ff1681565b61246d612467613029565b836130ea565b6124ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a390614d42565b60405180910390fd5b6124b8848484846136a4565b50505050565b601760009054906101000a900460ff1681565b600f6020528060005260406000206000915090508060000160009054906101000a900460ff16908060010154905082565b6016805461250f90614ae8565b80601f016020809104026020016040519081016040528092919081815260200182805461253b90614ae8565b80156125885780601f1061255d57610100808354040283529160200191612588565b820191906000526020600020905b81548152906001019060200180831161256b57829003601f168201915b505050505081565b606061259b82612fbd565b6125da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125d190615847565b60405180910390fd5b60156125e583613700565b60166040516020016125f993929190615937565b6040516020818303038152906040529050919050565b612617613029565b73ffffffffffffffffffffffffffffffffffffffff16612635612213565b73ffffffffffffffffffffffffffffffffffffffff161461268b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161268290614dae565b60405180910390fd5b6000600d60009054906101000a900460ff16156126dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126d490614e1a565b60405180910390fd5b8060048111156126f0576126ef614911565b5b601760009054906101000a900460ff16600481111561271257612711614911565b5b14612752576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161274990614eac565b60405180910390fd5b60008383905011612798576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161278f906159b4565b60405180910390fd5b60005b8383905081101561292d57601154600f60008686858181106127c0576127bf615682565b5b90506020020160208101906127d59190614596565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506001600f600086868581811061282f5761282e615682565b5b90506020020160208101906128449190614596565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff021916908315150217905550600e60008154809291906128ab9061529f565b91905055508383828181106128c3576128c2615682565b5b90506020020160208101906128d89190614596565b73ffffffffffffffffffffffffffffffffffffffff167f8a3be376fdc726be3f3cee8e59ba5698a268a9b59f69cdabcf06d2ec2c90658f60405160405180910390a280806129259061529f565b91505061279b565b50505050565b61293b613029565b73ffffffffffffffffffffffffffffffffffffffff16612959612213565b73ffffffffffffffffffffffffffffffffffffffff16146129af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129a690614dae565b60405180910390fd5b600d60009054906101000a900460ff1615600d60006101000a81548160ff021916908315150217905550426018819055507fd2a642be310b5beefe5c50f8cee7f67d7210962579bb3c8154f0cfc36d96b220600d60009054906101000a900460ff1642604051612a209291906149a3565b60405180910390a1565b60105481565b60125481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60158054612ad790614ae8565b80601f0160208091040260200160405190810160405280929190818152602001828054612b0390614ae8565b8015612b505780601f10612b2557610100808354040283529160200191612b50565b820191906000526020600020905b815481529060010190602001808311612b3357829003601f168201915b505050505081565b612b60613029565b73ffffffffffffffffffffffffffffffffffffffff16612b7e612213565b73ffffffffffffffffffffffffffffffffffffffff1614612bd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bcb90614dae565b60405180910390fd5b6000600d60009054906101000a900460ff1615612c26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c1d90614e1a565b60405180910390fd5b806004811115612c3957612c38614911565b5b601760009054906101000a900460ff166004811115612c5b57612c5a614911565b5b14612c9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c9290614eac565b60405180910390fd5b8260148190555081601381905550505050565b612cb6613029565b73ffffffffffffffffffffffffffffffffffffffff16612cd4612213565b73ffffffffffffffffffffffffffffffffffffffff1614612d2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d2190614dae565b60405180910390fd5b600d60009054906101000a900460ff1615612d7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d7190614e1a565b60405180910390fd5b6001601760009054906101000a900460ff166004811115612d9e57612d9d614911565b5b612da89190615117565b6004811115612dba57612db9614911565b5b601760006101000a81548160ff02191690836004811115612dde57612ddd614911565b5b021790555042601881905550601760009054906101000a900460ff166004811115612e0c57612e0b614911565b5b7fc71bede083c0a5c534596a0a4b0d99c36da65f2219bd1601e500298b4e277c8c42604051612e3b9190614528565b60405180910390a2565b600e5481565b612e53613029565b73ffffffffffffffffffffffffffffffffffffffff16612e71612213565b73ffffffffffffffffffffffffffffffffffffffff1614612ec7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ebe90614dae565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612f37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f2e90615a46565b60405180910390fd5b612f4081613471565b50565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612fb65750612fb582613861565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166130a483611d7d565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006130f582612fbd565b613134576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161312b90615ad8565b60405180910390fd5b600061313f83611d7d565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061318157506131808185612a36565b5b806131bf57508373ffffffffffffffffffffffffffffffffffffffff166131a784610aa4565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166131e882611d7d565b73ffffffffffffffffffffffffffffffffffffffff161461323e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161323590615b6a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156132ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132a590615bfc565b60405180910390fd5b6132b9838383613943565b6132c4600082613031565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546133149190615550565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461336b9190615117565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461342a838383613953565b505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b61346d828260405180602001604052806000815250613958565b5050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156135a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161359d90615c68565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516136979190614318565b60405180910390a3505050565b6136af8484846131c8565b6136bb848484846139b3565b6136fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136f190615cfa565b60405180910390fd5b50505050565b60606000821415613748576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061385c565b600082905060005b6000821461377a5780806137639061529f565b915050600a826137739190615d49565b9150613750565b60008167ffffffffffffffff811115613796576137956145cd565b5b6040519080825280601f01601f1916602001820160405280156137c85781602001600182028036833780820191505090505b5090505b60008514613855576001826137e19190615550565b9150600a856137f09190615d7a565b60306137fc9190615117565b60f81b81838151811061381257613811615682565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561384e9190615d49565b94506137cc565b8093505050505b919050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061392c57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061393c575061393b82613b3b565b5b9050919050565b61394e838383613ba5565b505050565b505050565b6139628383613cb9565b61396f60008484846139b3565b6139ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139a590615cfa565b60405180910390fd5b505050565b60006139d48473ffffffffffffffffffffffffffffffffffffffff16613e93565b15613b2e578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026139fd613029565b8786866040518563ffffffff1660e01b8152600401613a1f9493929190615e00565b6020604051808303816000875af1925050508015613a5b57506040513d601f19601f82011682018060405250810190613a589190615e61565b60015b613ade573d8060008114613a8b576040519150601f19603f3d011682016040523d82523d6000602084013e613a90565b606091505b50600081511415613ad6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613acd90615cfa565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050613b33565b600190505b949350505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b613bb0838383613eb6565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415613bf357613bee81613ebb565b613c32565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614613c3157613c308382613f04565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613c7557613c7081614071565b613cb4565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614613cb357613cb28282614142565b5b5b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613d29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d2090615eda565b60405180910390fd5b613d3281612fbd565b15613d72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d6990615f46565b60405180910390fd5b613d7e60008383613943565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613dce9190615117565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4613e8f60008383613953565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b60006001613f1184611f7d565b613f1b9190615550565b9050600060076000848152602001908152602001600020549050818114614000576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b600060016008805490506140859190615550565b90506000600960008481526020019081526020016000205490506000600883815481106140b5576140b4615682565b5b9060005260206000200154905080600883815481106140d7576140d6615682565b5b90600052602060002001819055508160096000838152602001908152602001600020819055506009600085815260200190815260200160002060009055600880548061412657614125615f66565b5b6001900381819060005260206000200160009055905550505050565b600061414d83611f7d565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b8280546141cd90614ae8565b90600052602060002090601f0160209004810192826141ef5760008555614236565b82601f1061420857805160ff1916838001178555614236565b82800160010185558215614236579182015b8281111561423557825182559160200191906001019061421a565b5b5090506142439190614247565b5090565b5b80821115614260576000816000905550600101614248565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6142ad81614278565b81146142b857600080fd5b50565b6000813590506142ca816142a4565b92915050565b6000602082840312156142e6576142e561426e565b5b60006142f4848285016142bb565b91505092915050565b60008115159050919050565b614312816142fd565b82525050565b600060208201905061432d6000830184614309565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561436d578082015181840152602081019050614352565b8381111561437c576000848401525b50505050565b6000601f19601f8301169050919050565b600061439e82614333565b6143a8818561433e565b93506143b881856020860161434f565b6143c181614382565b840191505092915050565b600060208201905081810360008301526143e68184614393565b905092915050565b6000819050919050565b614401816143ee565b811461440c57600080fd5b50565b60008135905061441e816143f8565b92915050565b60006020828403121561443a5761443961426e565b5b60006144488482850161440f565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061447c82614451565b9050919050565b61448c81614471565b82525050565b60006020820190506144a76000830184614483565b92915050565b6144b681614471565b81146144c157600080fd5b50565b6000813590506144d3816144ad565b92915050565b600080604083850312156144f0576144ef61426e565b5b60006144fe858286016144c4565b925050602061450f8582860161440f565b9150509250929050565b614522816143ee565b82525050565b600060208201905061453d6000830184614519565b92915050565b60008060006060848603121561455c5761455b61426e565b5b600061456a868287016144c4565b935050602061457b868287016144c4565b925050604061458c8682870161440f565b9150509250925092565b6000602082840312156145ac576145ab61426e565b5b60006145ba848285016144c4565b91505092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61460582614382565b810181811067ffffffffffffffff82111715614624576146236145cd565b5b80604052505050565b6000614637614264565b905061464382826145fc565b919050565b600067ffffffffffffffff821115614663576146626145cd565b5b61466c82614382565b9050602081019050919050565b82818337600083830152505050565b600061469b61469684614648565b61462d565b9050828152602081018484840111156146b7576146b66145c8565b5b6146c2848285614679565b509392505050565b600082601f8301126146df576146de6145c3565b5b81356146ef848260208601614688565b91505092915050565b60006020828403121561470e5761470d61426e565b5b600082013567ffffffffffffffff81111561472c5761472b614273565b5b614738848285016146ca565b91505092915050565b600080604083850312156147585761475761426e565b5b60006147668582860161440f565b92505060206147778582860161440f565b9150509250929050565b61478a816142fd565b811461479557600080fd5b50565b6000813590506147a781614781565b92915050565b600080604083850312156147c4576147c361426e565b5b60006147d2858286016144c4565b92505060206147e385828601614798565b9150509250929050565b600067ffffffffffffffff821115614808576148076145cd565b5b61481182614382565b9050602081019050919050565b600061483161482c846147ed565b61462d565b90508281526020810184848401111561484d5761484c6145c8565b5b614858848285614679565b509392505050565b600082601f830112614875576148746145c3565b5b813561488584826020860161481e565b91505092915050565b600080600080608085870312156148a8576148a761426e565b5b60006148b6878288016144c4565b94505060206148c7878288016144c4565b93505060406148d88782880161440f565b925050606085013567ffffffffffffffff8111156148f9576148f8614273565b5b61490587828801614860565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6005811061495157614950614911565b5b50565b600081905061496282614940565b919050565b600061497282614954565b9050919050565b61498281614967565b82525050565b600060208201905061499d6000830184614979565b92915050565b60006040820190506149b86000830185614309565b6149c56020830184614519565b9392505050565b600080fd5b600080fd5b60008083601f8401126149ec576149eb6145c3565b5b8235905067ffffffffffffffff811115614a0957614a086149cc565b5b602083019150836020820283011115614a2557614a246149d1565b5b9250929050565b60008060208385031215614a4357614a4261426e565b5b600083013567ffffffffffffffff811115614a6157614a60614273565b5b614a6d858286016149d6565b92509250509250929050565b60008060408385031215614a9057614a8f61426e565b5b6000614a9e858286016144c4565b9250506020614aaf858286016144c4565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680614b0057607f821691505b60208210811415614b1457614b13614ab9565b5b50919050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000614b76602c8361433e565b9150614b8182614b1a565b604082019050919050565b60006020820190508181036000830152614ba581614b69565b9050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000614c0860218361433e565b9150614c1382614bac565b604082019050919050565b60006020820190508181036000830152614c3781614bfb565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b6000614c9a60388361433e565b9150614ca582614c3e565b604082019050919050565b60006020820190508181036000830152614cc981614c8d565b9050919050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b6000614d2c60318361433e565b9150614d3782614cd0565b604082019050919050565b60006020820190508181036000830152614d5b81614d1f565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614d9860208361433e565b9150614da382614d62565b602082019050919050565b60006020820190508181036000830152614dc781614d8b565b9050919050565b7f54686520636f6e74726163742069732070617573656400000000000000000000600082015250565b6000614e0460168361433e565b9150614e0f82614dce565b602082019050919050565b60006020820190508181036000830152614e3381614df7565b9050919050565b7f5468697320616374696f6e206973206e6f7420616c6c6f77656420696e20746860008201527f6973207374617475730000000000000000000000000000000000000000000000602082015250565b6000614e9660298361433e565b9150614ea182614e3a565b604082019050919050565b60006020820190508181036000830152614ec581614e89565b9050919050565b7f41646472657373206973206e6f742077686974656c6973746564000000000000600082015250565b6000614f02601a8361433e565b9150614f0d82614ecc565b602082019050919050565b60006020820190508181036000830152614f3181614ef5565b9050919050565b7f6d696e696d756d206d696e7420616d6f756e7420697320310000000000000000600082015250565b6000614f6e60188361433e565b9150614f7982614f38565b602082019050919050565b60006020820190508181036000830152614f9d81614f61565b9050919050565b7f536f6c64204f7574000000000000000000000000000000000000000000000000600082015250565b6000614fda60088361433e565b9150614fe582614fa4565b602082019050919050565b6000602082019050818103600083015261500981614fcd565b9050919050565b7f6f6e6c79206d696e74206f726967696e2077616c6c6574000000000000000000600082015250565b600061504660178361433e565b915061505182615010565b602082019050919050565b6000602082019050818103600083015261507581615039565b9050919050565b7f657863656564206d6178206d696e74207065722077616c6c6574000000000000600082015250565b60006150b2601a8361433e565b91506150bd8261507c565b602082019050919050565b600060208201905081810360008301526150e1816150a5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000615122826143ee565b915061512d836143ee565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115615162576151616150e8565b5b828201905092915050565b7f616d6f756e74206578636565642072656d61696e696e67206d696e7400000000600082015250565b60006151a3601c8361433e565b91506151ae8261516d565b602082019050919050565b600060208201905081810360008301526151d281615196565b9050919050565b60006151e4826143ee565b91506151ef836143ee565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615615228576152276150e8565b5b828202905092915050565b7f696e737566696369656e7420666f6e6473000000000000000000000000000000600082015250565b600061526960118361433e565b915061527482615233565b602082019050919050565b600060208201905081810360008301526152988161525c565b9050919050565b60006152aa826143ee565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156152dd576152dc6150e8565b5b600182019050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b6000615344602b8361433e565b915061534f826152e8565b604082019050919050565b6000602082019050818103600083015261537381615337565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006153b0601f8361433e565b91506153bb8261537a565b602082019050919050565b600060208201905081810360008301526153df816153a3565b9050919050565b7f42616c616e636520697320300000000000000000000000000000000000000000600082015250565b600061541c600c8361433e565b9150615427826153e6565b602082019050919050565b6000602082019050818103600083015261544b8161540f565b9050919050565b7f61646472657373206e6f742077686974656c6973746564000000000000000000600082015250565b600061548860178361433e565b915061549382615452565b602082019050919050565b600060208201905081810360008301526154b78161547b565b9050919050565b7f6e6f7420616c6c6f776564206d696e74206d6f7265207468616e20616d6f756e60008201527f74206c6566740000000000000000000000000000000000000000000000000000602082015250565b600061551a60268361433e565b9150615525826154be565b604082019050919050565b600060208201905081810360008301526155498161550d565b9050919050565b600061555b826143ee565b9150615566836143ee565b925082821015615579576155786150e8565b5b828203905092915050565b7f6e6f206e65676174697665000000000000000000000000000000000000000000600082015250565b60006155ba600b8361433e565b91506155c582615584565b602082019050919050565b600060208201905081810360008301526155e9816155ad565b9050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b600061564c602c8361433e565b9150615657826155f0565b604082019050919050565b6000602082019050818103600083015261567b8161563f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b600061570d60298361433e565b9150615718826156b1565b604082019050919050565b6000602082019050818103600083015261573c81615700565b9050919050565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b600061579f602a8361433e565b91506157aa82615743565b604082019050919050565b600060208201905081810360008301526157ce81615792565b9050919050565b7f455243373231204d657461646174613a2055524920717565727920666f72206e60008201527f6f6e6578697374656e7420746f6b656e00000000000000000000000000000000602082015250565b600061583160308361433e565b915061583c826157d5565b604082019050919050565b6000602082019050818103600083015261586081615824565b9050919050565b600081905092915050565b60008190508160005260206000209050919050565b6000815461589481614ae8565b61589e8186615867565b945060018216600081146158b957600181146158ca576158fd565b60ff198316865281860193506158fd565b6158d385615872565b60005b838110156158f5578154818901526001820191506020810190506158d6565b838801955050505b50505092915050565b600061591182614333565b61591b8185615867565b935061592b81856020860161434f565b80840191505092915050565b60006159438286615887565b915061594f8285615906565b915061595b8284615887565b9150819050949350505050565b7f4e6f206164647265737365730000000000000000000000000000000000000000600082015250565b600061599e600c8361433e565b91506159a982615968565b602082019050919050565b600060208201905081810360008301526159cd81615991565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000615a3060268361433e565b9150615a3b826159d4565b604082019050919050565b60006020820190508181036000830152615a5f81615a23565b9050919050565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000615ac2602c8361433e565b9150615acd82615a66565b604082019050919050565b60006020820190508181036000830152615af181615ab5565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000615b5460258361433e565b9150615b5f82615af8565b604082019050919050565b60006020820190508181036000830152615b8381615b47565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000615be660248361433e565b9150615bf182615b8a565b604082019050919050565b60006020820190508181036000830152615c1581615bd9565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000615c5260198361433e565b9150615c5d82615c1c565b602082019050919050565b60006020820190508181036000830152615c8181615c45565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000615ce460328361433e565b9150615cef82615c88565b604082019050919050565b60006020820190508181036000830152615d1381615cd7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000615d54826143ee565b9150615d5f836143ee565b925082615d6f57615d6e615d1a565b5b828204905092915050565b6000615d85826143ee565b9150615d90836143ee565b925082615da057615d9f615d1a565b5b828206905092915050565b600081519050919050565b600082825260208201905092915050565b6000615dd282615dab565b615ddc8185615db6565b9350615dec81856020860161434f565b615df581614382565b840191505092915050565b6000608082019050615e156000830187614483565b615e226020830186614483565b615e2f6040830185614519565b8181036060830152615e418184615dc7565b905095945050505050565b600081519050615e5b816142a4565b92915050565b600060208284031215615e7757615e7661426e565b5b6000615e8584828501615e4c565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000615ec460208361433e565b9150615ecf82615e8e565b602082019050919050565b60006020820190508181036000830152615ef381615eb7565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000615f30601c8361433e565b9150615f3b82615efa565b602082019050919050565b60006020820190508181036000830152615f5f81615f23565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220d08bae31498b870e4ca325209db3cb261701709f43863d510924704e39c61f7e64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 170,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 172,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 176,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 180,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 184,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 190,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1159,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1163,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1166,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1170,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 115,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "_status",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2204,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(Counter)1863_storage"
      },
      {
        "astId": 2206,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "isPaused",
        "offset": 0,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 2208,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "burnEnabled",
        "offset": 1,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 2210,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "whitelistCount",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2215,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "whiteListedAddress",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_struct(WhitelistData)2197_storage)"
      },
      {
        "astId": 2217,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "maxSupply",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 2219,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "maxMintPerWalletWhite",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 2221,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "maxMintPerWalletPublic",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 2223,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "mintPricePublic",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 2225,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "mintPriceWhite",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 2227,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "uri",
        "offset": 0,
        "slot": "21",
        "type": "t_string_storage"
      },
      {
        "astId": 2230,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "baseExtension",
        "offset": 0,
        "slot": "22",
        "type": "t_string_storage"
      },
      {
        "astId": 2233,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "stage",
        "offset": 0,
        "slot": "23",
        "type": "t_enum(MintStage)2192"
      },
      {
        "astId": 2235,
        "contract": "contracts/NftMintStage.sol:NftMintStage",
        "label": "lastActivity",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(MintStage)2192": {
        "encoding": "inplace",
        "label": "enum NftMintStage.MintStage",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(WhitelistData)2197_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct NftMintStage.WhitelistData)",
        "numberOfBytes": "32",
        "value": "t_struct(WhitelistData)2197_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1863_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1862,
            "contract": "contracts/NftMintStage.sol:NftMintStage",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(WhitelistData)2197_storage": {
        "encoding": "inplace",
        "label": "struct NftMintStage.WhitelistData",
        "members": [
          {
            "astId": 2194,
            "contract": "contracts/NftMintStage.sol:NftMintStage",
            "label": "isWhiteListed",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2196,
            "contract": "contracts/NftMintStage.sol:NftMintStage",
            "label": "allowedMints",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}